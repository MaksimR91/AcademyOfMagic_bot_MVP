import os, time, gc, threading, psutil, logging
from logger import logger

def cleanup_temp_files():
    tmp_path = "/tmp"
    if os.path.exists(tmp_path):
        for fname in os.listdir(tmp_path):
            if fname.endswith(('.wav', '.mp3', '.ogg')):
                try:
                    os.remove(os.path.join(tmp_path, fname))
                    logger.info(f"ü•π –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {fname}")
                except Exception as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {fname}: {e}")
    for fname in os.listdir("tmp"):
        if fname.startswith("app_start_") and fname.endswith(".log"):
            try:
                os.remove(os.path.join("tmp", fname))
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ª–æ–≥–∞ {fname}: {e}")

def start_memory_cleanup_loop():
    guni = logging.getLogger("gunicorn.error")
    def loop():
        while True:
            time.sleep(600)
            gc.collect()
            mb = psutil.Process().memory_info().rss / 1024 / 1024
            msg = f"üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å {mb:.2f} MB"
            # –ü–∏—à–µ–º –¢–û–õ–¨–ö–û –≤ –æ–¥–∏–Ω –ª–æ–≥–≥–µ—Ä (gunicorn.error) ‚Äî –ø–æ–ø–∞–¥—ë—Ç –≤ –∫–æ–Ω—Å–æ–ª—å Render.
            # –í —Ñ–∞–π–ª –∑–∞–ø–∏—Å—å –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ propagate root? –ù–µ—Ç. –ü–æ—ç—Ç–æ–º—É –¥—É–±–ª–∏—Ä—É–µ–º –≤ root –≤—Ä—É—á–Ω—É—é.
            logging.getLogger().info(msg)   # –≤ —Ñ–∞–π–ª
            guni.info(msg)                  # –≤ –∫–æ–Ω—Å–æ–ª—å
    threading.Thread(target=loop, daemon=True).start()

def log_memory_usage():
    process = psutil.Process()
    mem_mb = process.memory_info().rss / 1024 / 1024
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {mem_mb:.2f} MB")