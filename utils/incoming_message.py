from utils.env_loader import ensure_env_loaded
ensure_env_loaded()
import os, time, threading, requests
from openai import OpenAI
from logger import logger
from state.state import save_if_absent, get_state, update_state
from utils.token_manager import get_token
from router import route_message
import utils.outgoing_message as outgoing
from datetime import datetime
from zoneinfo import ZoneInfo

try:
    import boto3
    from botocore.config import Config as BotoConfig
except Exception:
    boto3 = None
    BotoConfig = None

OPENAI_API_KEY = os.getenv("OPENAI_APIKEY")
S3_BUCKET = os.getenv("YANDEX_BUCKET", "magicacademylogsars")
S3_ENDPOINT = os.getenv("YANDEX_ENDPOINT", "https://storage.yandexcloud.net")
S3_REGION = os.getenv("YANDEX_REGION", "ru-central1")

def handle_message(message, phone_number_id, bot_display_number, contacts):
    from_number = message.get("from")
    meta_msg_id = message.get("id")           # <-- –¥–æ–±–∞–≤–∏–ª–∏
    meta_ts     = int(message.get("timestamp", time.time()))

    if from_number.endswith(bot_display_number[-9:]):
        logger.info("üîÅ –≠—Ö–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    normalized_number = normalize_for_meta(from_number)
    name = contacts[0].get("profile", {}).get("name") if contacts else "–¥—Ä—É–≥"

    if message.get("type") == "text":
        text = message.get("text", {}).get("body", "").strip()
        process_text_message(text, normalized_number, phone_number_id, name,
                             meta_message_id=meta_msg_id, meta_ts=meta_ts)

    elif message.get("type") == "audio":
        logger.info("üé§ –ê—É–¥–∏–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –Ω–∞ —Ñ–æ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        threading.Thread(
            target=handle_audio_async,
            args=(message, phone_number_id, normalized_number, name),
            daemon=True
        ).start()
    elif message.get("type") in ("image", "document"):
        # MVP: –º–µ–¥–∏–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ‚Äî –æ—Ç–≤–µ—Ç–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤–µ–∂–ª–∏–≤–æ
        logger.info("üñº –ü–æ–ª—É—á–µ–Ω–æ media-—Å–æ–æ–±—â–µ–Ω–∏–µ (%s) ‚Äî –≤ MVP –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º", message["type"])
        threading.Thread(target=handle_media_async,
                         args=(message, phone_number_id, normalized_number),
                         daemon=True).start()

def handle_audio_async(message, phone_number_id, normalized_number, name):
    from pydub import AudioSegment
    try:
        audio_id = message["audio"]["id"]
        logger.info(f"üéø –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, media ID: {audio_id}")

        url = f"https://graph.facebook.com/v19.0/{audio_id}"
        headers = {"Authorization": f"Bearer {get_token()}"}
        resp = requests.get(url, headers=headers, timeout=10)
        resp.raise_for_status()
        media_url = resp.json().get("url")

        media_resp = requests.get(media_url, headers=headers, timeout=30)
        media_resp.raise_for_status()
        # –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        audio_path = "/tmp/audio.ogg"
        with open(audio_path, "wb") as f:
            f.write(media_resp.content)

        audio = AudioSegment.from_file(audio_path)
        duration_sec = len(audio) / 1000
        logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration_sec:.1f} —Å–µ–∫—É–Ω–¥")

        if duration_sec > 60:
            logger.warning("‚ö†Ô∏è –ê—É–¥–∏–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 60 —Å–µ–∫—É–Ω–¥")
            outgoing.send_text_message(
                phone_number_id,
                normalized_number,
                "–ì–æ–ª–æ—Å–æ–≤–æ–µ –¥–ª–∏–Ω–Ω–µ–µ 60 —Å–µ–∫. –ü—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä–æ—á–µ (–¥–æ –º–∏–Ω—É—Ç—ã) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç."
            )
            return
        client = OpenAI(api_key=OPENAI_API_KEY)
        with open(audio_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="text"
            )
        # —É SDK .text —É–∂–µ —Å—Ç—Ä–æ–∫–∞; –ø—Ä–∏ response_format="text" resp ‚Äî —Ç–æ–∂–µ —Å—Ç—Ä–æ–∫–∞
        text = getattr(transcript, "text", transcript)
        logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
        text = (text or "").strip()

        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º .ogg + .txt –≤ S3 (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ)
        try:
            _save_voice_to_s3(
                raw_bytes=media_resp.content,
                transcript_text=text,
                wamid=message.get("id") or audio_id
            )
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤ S3: {e}")
        if text:
            message_uid = message.get("id")
            message_ts = int(message.get("timestamp", "0") or 0)
            process_text_message(text, normalized_number, phone_number_id, name, message_uid, message_ts)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")
        # –ü–æ –¢–ó: –ø–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ ‚Üí –ø–æ–ø—Ä–æ—Å–∏—Ç—å —Ç–µ–∫—Å—Ç
        try:
            outgoing.send_text_message(
                phone_number_id,
                normalized_number,
                "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ. –ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 60 —Å–µ–∫)."
            )
        except Exception as ee:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {ee}")

def handle_media_async(message, phone_number_id, user_id):
    """MVP: –º–µ–¥–∏–∞ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º. –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ –∏ –æ—Ç–≤–µ—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–º."""
    media_type = message["type"]
    media_obj  = message[media_type]
    media_id   = media_obj.get("id")

    # UID + ts
    message_uid = message.get("id") or media_id
    try:
        message_ts = int(message.get("timestamp", time.time()))
    except Exception:
        message_ts = int(time.time())

    st = get_state(user_id) or {}
    # –∂—ë—Å—Ç–∫–∏–π –¥–µ–¥—É–ø
    if st.get("last_incoming_id") == message_uid:
        logger.info(f"[media:MVP] duplicate ignored user={user_id} msg={message_uid}")
        return
    if st.get("last_incoming_ts") and message_ts < st["last_incoming_ts"] - 5:
        logger.info(f"[media:MVP] old message ignored user={user_id} msg={message_uid}")
        return

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–¥—è—â–µ–µ
    update_state(user_id, {
        "last_incoming_id": message_uid,
        "last_incoming_ts": message_ts,
        "last_sender": "user"
    })

    # –≤–µ–∂–ª–∏–≤—ã–π –æ—Ç–≤–µ—Ç
    try:
        outgoing.send_text_message(
            phone_number_id,
            user_id,
            "–ü–æ–∫–∞ –ø—Ä–∏–Ω–∏–º–∞—é —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –∏ –∫–æ—Ä–æ—Ç–∫–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã–µ. –ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç."
         )
    except Exception as e:
        logger.warning(f"[media:MVP] –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: {e}")

def process_text_message(text: str,
                         normalized_number: str,
                         phone_number_id: str,
                         name: str | None,
                         meta_message_id: str | None = None,
                         meta_ts: int | None = None):
    from state.state import get_state, update_state, save_if_absent
    if not text:
        return

    st = get_state(normalized_number) or {}

    # --- –ñ–Å–°–¢–ö–ò–ô –¥–µ–¥—É–ø –ø–æ message_id –æ—Ç Meta
    if meta_message_id and st.get("last_incoming_id") == meta_message_id:
        logger.info(f"[router] drop duplicate by meta_id user={normalized_number} id={meta_message_id}")
        return

    # --- –ú–Ø–ì–ö–ò–ô –¥–µ–¥—É–ø –ø–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º—É —Ç–µ–∫—Å—Ç—É –≤ –æ—á–µ–Ω—å —É–∑–∫–æ–º –æ–∫–Ω–µ (1 —Å–µ–∫),
    #     —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±—ã–ª —Ç–æ–∂–µ "user" –∏ stage –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    now_ts = int(time.time())
    same_text = (text == st.get("last_incoming_text"))
    very_recent = (now_ts - int(st.get("last_incoming_ts", 0)) <= 1)
    same_stage = (st.get("stage") == st.get("last_incoming_stage"))
    if same_text and very_recent and st.get("last_sender") == "user" and same_stage:
        logger.info(f"[router] drop near-duplicate by text window user={normalized_number}")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥—è—â–µ–º
    update_state(normalized_number, {
        "last_incoming_id": meta_message_id or "",
        "last_incoming_ts": meta_ts or now_ts,
        "last_incoming_text": text,
        "last_incoming_stage": st.get("stage"),
        "last_sender": "user",
    })

    # --- –¥–∞–ª—å—à–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ–¥:
    save_if_absent(normalized_number,
                   normalized_number=normalized_number,
                   raw_number=normalized_number,
                   client_name=name or "")

    try:
        route_message(text, normalized_number, client_name=name)
    except Exception as e:
        logger.exception(f"üí• –û—à–∏–±–∫–∞ route_message –¥–ª—è {normalized_number}: {e}")
        outgoing.send_text_message(
            phone_number_id,
            normalized_number,
            "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

def normalize_for_meta(number):
    if number.startswith('77'):
        return '787' + number[2:]
    if number.startswith('79'):
        return '789' + number[2:]
    return number

def handle_status(status):
    logger.info("üì• –°—Ç–∞—Ç—É—Å: %s", status)

def _save_voice_to_s3(raw_bytes: bytes, transcript_text: str, wamid: str) -> None:
    """
    –ö–ª–∞–¥—ë–º .ogg –∏ .txt –Ω–∞ 30 –¥–Ω–µ–π: s3://magicacademylogsars/voice/{YYYY-MM-DD}/{wamid}.ogg|.txt
    –î–∞—Ç–∞ ‚Äî –ø–æ Asia/Atyrau.
    """
    if not boto3 or not os.getenv("YANDEX_ACCESS_KEY_ID") or not os.getenv("YANDEX_SECRET_ACCESS_KEY"):
        logger.info("S3 –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω (YANDEX_* –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç) ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ")
        return
    tz = ZoneInfo("Asia/Atyrau")
    day = datetime.now(tz).strftime("%Y-%m-%d")
    key_ogg = f"voice/{day}/{wamid}.ogg"
    key_txt = f"voice/{day}/{wamid}.txt"

    s3 = boto3.client(
        "s3",
        region_name=S3_REGION,
        endpoint_url=S3_ENDPOINT,
        aws_access_key_id=os.getenv("YANDEX_ACCESS_KEY_ID"),
        aws_secret_access_key=os.getenv("YANDEX_SECRET_ACCESS_KEY"),
        config=BotoConfig(connect_timeout=5, read_timeout=10),
    )
    s3.put_object(Bucket=S3_BUCKET, Key=key_ogg, Body=raw_bytes, ContentType="audio/ogg")
    s3.put_object(Bucket=S3_BUCKET, Key=key_txt, Body=(transcript_text or "").encode("utf-8"),
                  ContentType="text/plain; charset=utf-8")
    logger.info("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ –≤ S3: %s, %s", key_ogg, key_txt)