import os, time, logging
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.jobstores.sqlalchemy import SQLAlchemyJobStore
from apscheduler.jobstores.memory import MemoryJobStore
from datetime import datetime, timezone
from state.state import get_state          # —Ç–æ—Ç –∂–µ dict‚ÄëAPI

if not logging.getLogger().handlers:
    h = logging.StreamHandler()          # stdout ‚Üí Render console
    h.setFormatter(logging.Formatter("%(levelname)s:%(name)s:%(message)s"))
    logging.getLogger().addHandler(h)

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ  –±–∞–∑–æ–≤—ã–π –ª–æ–≥–≥–µ—Ä  ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
log = logging.getLogger(__name__)
log.setLevel(logging.INFO)
log.info("üì¶ reminder_engine import started")
LOCAL_DEV   = os.getenv("LOCAL_DEV", "0") == "1"
TEST_MODE   = os.getenv("ACADEMYBOT_TEST", "0") == "1"

# ---------- JobStore –≤—ã–±–æ—Ä ----------
if LOCAL_DEV:
    jobstores = {"default": MemoryJobStore()}
    log.info("üü¢ LOCAL_DEV=1 ‚Üí MemoryJobStore (–±–µ–∑ –ë–î)")
else:
    try:
        # 1) –ü—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ: –≥–æ—Ç–æ–≤—ã–π DSN
        pg_url = os.getenv("SUPABASE_DB_URL")
        # 2) Fallback: –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è –ø–æ—Å—Ç—Ä–æ–∏—Ç—å –∏–∑ SUPABASE_URL (–µ—Å–ª–∏ –µ—Å—Ç—å)
        if not pg_url:
            raw_supabase = os.getenv("SUPABASE_URL")
            if not raw_supabase:
                raise RuntimeError("neither SUPABASE_DB_URL nor SUPABASE_URL set")
            pg_url = (
                raw_supabase
                .replace("https://", "postgresql+psycopg2://")
                .replace(".supabase.co", ".supabase.co/postgres")
            )
        log.info(f"üîó reminder_engine PG url ‚Üí {pg_url.split('@')[-1].split('?')[0]}")
        jobstores = {"default": SQLAlchemyJobStore(
            url=pg_url,
            engine_options={"connect_args": {"connect_timeout": 5}},
        )}
    except Exception as e:
        log.exception(f"‚ö†Ô∏è SQLAlchemyJobStore init failed ‚Üí MemoryJobStore: {e}")
        jobstores = {"default": MemoryJobStore()}

# ---------- APScheduler —Å—Ç–∞—Ä—Ç ----------
sched = BackgroundScheduler(jobstores=jobstores, timezone="UTC")
if TEST_MODE:
    log.info("üü° TEST_MODE=1 ‚Üí —à–µ–¥—É–ª–µ—Ä –Ω–µ —Å—Ç–∞—Ä—Ç—É–µ–º")
else:
    try:
        sched.start()
        log.info("‚è∞ reminder_engine started with %s jobstore", next(iter(jobstores)))
    except Exception as e:
        log.exception(f"üí• APScheduler start error: {e}")

# ---------- —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---------------------------
#  accepted func_path formats
#  ‚Ä¢ "package.module.func"
#  ‚Ä¢ "package.module:func"       ‚Üê –æ—Å—Ç–∞—ë—Ç—Å—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ —Å –ø—Ä–æ–¥-–∫–æ–¥–æ–º
def plan(user_id: str, func_ref, delay_sec: int) -> None:
    """
    –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—É—é –∑–∞–¥–∞—á—É.
    ‚Ä¢ func_path  ‚Äì —Å—Ç—Ä–æ–∫–æ–π "blocks.block02.send_first_reminder_if_silent"
    ‚Ä¢ delay_sec  ‚Äì —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –≤—ã–∑–≤–∞—Ç—å
    –ü—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–º –≤—ã–∑–æ–≤–µ —Å —Ç–µ–º –∂–µ –∫–ª—é—á–æ–º —Å—Ç–∞—Ä–∞—è –∑–∞–¥–∞—á–∞ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç—Å—è.
    """
    # –ø—Ä–∏–Ω–∏–º–∞–µ–º –ò–õ–ò —Å—Ç—Ä–æ–∫—É, –ò–õ–ò —Å–∞–º—É —Ñ—É–Ω–∫—Ü–∏—é
    if callable(func_ref):
        norm_path = f"{func_ref.__module__}.{func_ref.__name__}"
    else:
        norm_path = func_ref.replace(":", ".", 1)
    job_id    = f"{user_id}:{norm_path}"
    run_at_ts = time.time() + delay_sec

    # –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–∂–µ –ø—Ä–æ—à–ª–∞ ‚Äì –Ω–µ —Å—Ç–∞–≤–∏–º —Å–Ω–æ–≤–∞
    if run_at_ts <= time.time():
        return

    # remove & add (idempotent)
    try:
        sched.remove_job(job_id)
    except Exception:
        pass
     # run_date ‚Äî —è–≤–Ω—ã–π UTC datetime, —á—Ç–æ–±—ã –Ω–µ –ø—É—Ç–∞—Ç—å—Å—è —Å —Ç–∞–π–º–∑–æ–Ω–æ–π
    run_dt = datetime.fromtimestamp(run_at_ts, tz=timezone.utc)
    sched.add_job(
        execute_job,
        "date",
        id=job_id,
        run_date=run_dt,
        misfire_grace_time=300,
        args=[user_id, norm_path],
    )
    log.info(f"[reminder_engine] scheduled {job_id} in {delay_sec//60}¬†min")

# ---------- —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞, –∫–æ—Ç–æ—Ä—É—é —É–≤–∏–¥–∏—Ç APScheduler -------------
def execute_job(user_id: str, func_path: str):
    """
    –£–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–π launcher, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏.
    –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Å—Ç—Ä–æ–≥–æ (user_id, func_path) ‚Äì –æ–±–∞¬†—Å—Ç—Ä–æ–∫–∏.
    """
    func_path = func_path.replace(":", ".", 1)     # –ø–æ–¥–¥–µ—Ä–∂–∫–∞ ¬´:¬ª
    mod_name, func_name = func_path.rsplit(".", 1)
    mod = __import__(mod_name, fromlist=[func_name])
    func = getattr(mod, func_name)
    try:
        func(user_id, _send_func_factory(user_id))
    except TypeError:
        func(user_id)
    except Exception as e:
        log.error(f"[reminder_engine] job {user_id}:{func_path} error: {e}")

# ---------- –ª—ë–≥–∫–∞—è –æ–±—ë—Ä—Ç–∫–∞ –¥–ª—è send_text ------------------------
from utils.whatsapp_senders import send_text
def _send_func_factory(user_id):
    def _send(body):
        st = get_state(user_id) or {}
        to = st.get("normalized_number", user_id)
        send_text(to, body)
    return _send