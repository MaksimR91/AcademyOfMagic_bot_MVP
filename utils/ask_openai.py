from utils.env_loader import ensure_env_loaded
ensure_env_loaded()
import os
import time
import logging
from openai import OpenAI, APIError, RateLimitError, AuthenticationError, APITimeoutError, APIConnectionError

logger = logging.getLogger(__name__)

# 1) –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –Ω–æ–≤—É—é
os.environ["OPENAI_API_KEY"] = os.getenv("OPENAI_APIKEY", "")

# 2) –°–æ–∑–¥–∞—ë–º –∫–ª–∏–µ–Ω—Ç–∞ –ª–µ–Ω–∏–≤–æ, —á—Ç–æ–±—ã –Ω–µ –ø–∞–¥–∞—Ç—å –Ω–∞ –∏–º–ø–æ—Ä—Ç–µ
_client = None
def get_client():
    global _client
    if _client is None:
        api_key = os.getenv("OPENAI_API_KEY")
        if not api_key:
            raise RuntimeError("Missing OPENAI_APIKEY/OPENAI_API_KEY")
        _client = OpenAI(api_key=api_key)
    return _client

def ask_openai(prompt: str, system_prompt: str = "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏–ª–ª—é–∑–∏–æ–Ω–∏—Å—Ç–∞ –ê—Ä—Å–µ–Ω–∏—è. –û—Ç–≤–µ—á–∞–π –æ—Å–º—ã—Å–ª–µ–Ω–Ω–æ, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –∫—Ä–∞—Ç–∫–æ.", max_tokens: int = 150) -> str:
    try:
        client = get_client()
        start = time.time()
        resp = client.chat.completions.create(
            model="gpt-3.5-turbo-0125",
            messages=[
                {"role": "system", "content": system_prompt},
                {"role": "user", "content": prompt}
            ],
            temperature=0,
            max_tokens=max_tokens,
            timeout=20
        )
        ans = resp.choices[0].message.content.strip()
        logger.info(f"[ask_openai] ‚úÖ –û—Ç–≤–µ—Ç: {ans}")
        logger.info(f"[ask_openai] üïí {time.time() - start:.2f} —Å–µ–∫")
        logger.info(f"[ask_openai] üìà –¢–æ–∫–µ–Ω—ã: {resp.usage.total_tokens}")
        return ans
    except AuthenticationError as e:
        logger.error(f"[ask_openai] ‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è: {e}")
        return "–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏"
    except RateLimitError:
        logger.warning("[ask_openai] ‚ö†Ô∏è –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤")
        return "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤"
    except (APITimeoutError, APIConnectionError):
        logger.warning("[ask_openai] ‚è∞ –¢–∞–π–º–∞—É—Ç / –Ω–µ—Ç —Å–≤—è–∑–∏")
        return "–¢–∞–π–º–∞—É—Ç"
    except APIError as e:
        logger.error(f"[ask_openai] ‚õî –û—à–∏–±–∫–∞ API: {e}")
        return "API –æ—à–∏–±–∫–∞"
    except Exception as e:
        logger.exception(f"[ask_openai] üí• –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞"
