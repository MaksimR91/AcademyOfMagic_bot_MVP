import gevent.monkey
gevent.monkey.patch_all(subprocess=True, ssl=True)
from dotenv import load_dotenv
load_dotenv()
# ----- ENV sanity check --------------------------------------------------
from utils.env_check import check_env
check_env()                       # —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º, –Ω–µ –ø–∞–¥–∞–µ–º—ã
import logging
logging.getLogger().info("üí¨ logger test ‚Äî root INFO visible?")
import os
import gc
import psutil
import time
import threading
import logging
from datetime import datetime
from flask import Flask, request, jsonify, render_template_string, abort
from logger import logger
from rollover_scheduler import start_rollover_scheduler
start_rollover_scheduler()
import requests
from openai import OpenAI
from pydub import AudioSegment
from utils.supabase_token import load_token_from_supabase, save_token_to_supabase, ping_supabase
from utils.upload_materials_to_meta_and_update_registry import \
        upload_materials_to_meta_and_update_registry
import json, tempfile, textwrap
from router import route_message
from state.state import save_if_absent      # –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, —á—Ç–æ–±—ã –æ–¥–∏–Ω —Ä–∞–∑ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–º–µ—Ä
from state.state import save_if_absent, get_state, update_state
logger.info("üí¨ logger test ‚Äî –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –≤ –∫–æ–Ω—Å–æ–ª–∏ Render")

# Supabase config
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_API_KEY = os.getenv("SUPABASE_API_KEY")
SUPABASE_TABLE_NAME = "tokens"

# ======= –õ–û–ö–ê–õ–¨–ù–´–ô –õ–û–ì–ì–ï–† –î–õ–Ø –ü–ï–†–í–û–ì–û –≠–¢–ê–ü–ê –ó–ê–ü–£–°–ö–ê ========
os.makedirs("tmp", exist_ok=True)
logger.info("üü¢ app.py –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")

# ‚îÄ‚îÄ‚îÄ –ì–ª—É—à–∏–º ¬´–±–æ–ª—Ç–ª–∏–≤—ã–µ¬ª –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
NOISY_LOGGERS = ("botocore", "boto3", "urllib3", "s3transfer", "apscheduler")
for _name in NOISY_LOGGERS:
    _lg = logging.getLogger(_name)
    _lg.setLevel(logging.WARNING)   # –∏–ª–∏ ERROR, –µ—Å–ª–∏ —Å–æ–≤—Å–µ–º —Ç–∏—à–∏–Ω–∞ –Ω—É–∂–Ω–∞
    _lg.propagate = False

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è boto3 –º–æ–∂–Ω–æ:
try:
    import boto3
    boto3.set_stream_logger("", logging.WARNING)
except Exception:
    pass

app = Flask(__name__)

# –û–¥–∏–Ω –ø—É—Ç—å –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∫–æ–Ω—Å–æ–ª—å ‚Äî —á–µ—Ä–µ–∑ gunicorn.error.
# –ü–æ—ç—Ç–æ–º—É flask-–ª–æ–≥–≥–µ—Ä –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–∫:
flask_log = app.logger
flask_log.setLevel(logging.INFO)
flask_log.handlers.clear()      # —É–±–∏—Ä–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π StreamHandler Flask
flask_log.propagate = True      # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ root (—Ñ–∞–π–ª)

API_URL = "https://graph.facebook.com/v15.0/{phone_number_id}/messages"
VERIFY_TOKEN = os.getenv("VERIFY_TOKEN")
openai_api_key = os.getenv("OPENAI_APIKEY")
META_APP_ID = os.getenv("META_APP_ID")
META_APP_SECRET = os.getenv("META_APP_SECRET")
PHONE_NUMBER_ID = os.getenv("PHONE_NUMBER_ID")

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID")

def _write_gcp_key():
    raw_json = os.getenv("GCP_VISION_KEY_JSON")
    if not raw_json:
        raise RuntimeError("GCP_VISION_KEY_JSON env var is missing")

    # —Å–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    tmpdir = tempfile.gettempdir()
    key_path = os.path.join(tmpdir, "gcp-key.json")

    # –µ—Å–ª–∏ Render —Å–æ—Ö—Ä–∞–Ω–∏–ª –∫–∞–∫ one‚Äëline, –ø–æ–ø—Ä–æ–±—É–µ–º –∫—Ä–∞—Å–∏–≤–æ –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å
    try:
        parsed = json.loads(raw_json)
        pretty = json.dumps(parsed, ensure_ascii=False, indent=2)
    except json.JSONDecodeError:
        # –∫–ª—é—á —É–∂–µ –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–π ‚Äî –ø–∏—à–µ–º –∫–∞–∫ –µ—Å—Ç—å
        pretty = textwrap.dedent(raw_json)

    with open(key_path, "w", encoding="utf-8") as f:
        f.write(pretty)

    # –≤–∞–∂–Ω–æ–µ¬†‚Äî —Å–æ–æ–±—â–∏—Ç—å Vision¬†SDK, –≥–¥–µ –ª–µ–∂–∏—Ç –∫–ª—é—á
    os.environ["GOOGLE_APPLICATION_CREDENTIALS"] = key_path
    logger.info(f"GCP credentials written to {key_path}")

_write_gcp_key()

def send_telegram_alert(text):
    if not TELEGRAM_TOKEN or not TELEGRAM_CHAT_ID:
        logger.warning("‚ö†Ô∏è TELEGRAM_TOKEN –∏–ª–∏ TELEGRAM_CHAT_ID –Ω–µ –∑–∞–¥–∞–Ω—ã")
        return
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": text}
        resp = requests.post(url, json=payload, timeout=10)
        if resp.status_code == 200:
            logger.info("üì¢ Telegram-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logger.warning(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {resp.status_code} {resp.text}")
    except Exception as e:
        logger.error(f"üí• –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ Telegram-—Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

client = OpenAI(api_key=openai_api_key)
logger.info(f"üîê OpenAI API key –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞: {openai_api_key[:5]}..., –¥–ª–∏–Ω–∞: {len(openai_api_key)}")

ADMIN_PASSWORD = os.getenv("ADMIN_PASSWORD")
try:
    WHATSAPP_TOKEN = load_token_from_supabase()
    logger.info(f"üîç –ó–∞–≥—Ä—É–∂–µ–Ω —Ç–æ–∫–µ–Ω –∏–∑ Supabase: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ {WHATSAPP_TOKEN[:8]}..., –¥–ª–∏–Ω–∞: {len(WHATSAPP_TOKEN)}")
except Exception as e:
    logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω –∏–∑ Supabase: {e}")
    WHATSAPP_TOKEN = os.getenv("WHATSAPP_TOKEN", "")
    if WHATSAPP_TOKEN:
        logger.warning("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–∫–µ–Ω –∏–∑ ENV (fallback).")
    else:
        logger.critical("üí• –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞ WhatsApp. –ë–æ—Ç –Ω–µ —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å.")

form_template = """
<!DOCTYPE html>
<html>
<head><title>–û–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω</title></head>
<body>
  <h2>–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ WhatsApp</h2>
  {% if message %}<p style=\"color:green\">{{ message }}</p>{% endif %}
  <form method=\"POST\">
    –ü–∞—Ä–æ–ª—å: <input type=\"password\" name=\"password\"><br><br>
    –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω:<br>
    <textarea name=\"token\" rows=\"6\" cols=\"80\"></textarea><br><br>
    <input type=\"submit\" value=\"–°–æ—Ö—Ä–∞–Ω–∏—Ç—å\">
  </form>
</body>
</html>
"""

@app.route("/admin/token", methods=["GET", "POST"])
def update_token():
    global WHATSAPP_TOKEN
    message = None
    if request.method == "POST":
        password = request.form.get("password")
        if password != ADMIN_PASSWORD:
            abort(403)
        token = request.form.get("token", "").strip()
        logger.info(f"üì• –¢–æ–∫–µ–Ω –∏–∑ —Ñ–æ—Ä–º—ã (repr): {repr(token)}")
        if token:
            save_token_to_supabase(token)
            WHATSAPP_TOKEN = token
    check_token_validity()
    message = "‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!"
    return render_template_string(form_template, message=message)

def get_token():
    return WHATSAPP_TOKEN

def check_token_validity():
    token = get_token()
    logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞: –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–∞ {token[:8]}..., –¥–ª–∏–Ω–∞: {len(token)}")
    test_url = f"https://graph.facebook.com/v15.0/me?access_token={token}"
    try:
        resp = requests.get(test_url, timeout=10)
        logger.info(f"üì° Meta –æ—Ç–≤–µ—Ç: {resp.status_code} {resp.text}")
        if resp.status_code != 200:
            logger.warning("‚ùå –¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω! –°–æ–æ–±—â–∞–µ–º –≤ Telegram...")
            send_telegram_alert("‚ùóÔ∏è–¢–æ–∫–µ–Ω WhatsApp –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω. –ó–∞–π–¥–∏—Ç–µ –≤ –∞–¥–º–∏–Ω–∫—É –∏ –æ–±–Ω–æ–≤–∏—Ç–µ –µ–≥–æ.")
        else:
            logger.info("‚úÖ –¢–æ–∫–µ–Ω –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω")
    except Exception as e:
        logger.warning(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞: {e}")
        send_telegram_alert(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–æ–∫–µ–Ω–∞ WhatsApp: {e}")


def start_token_check_loop():
    def loop():
        while True:
            check_token_validity()
            time.sleep(14400)  # —Ä–∞–∑ –≤ 4 —á–∞—Å–∞
    threading.Thread(target=loop, daemon=True).start()

def start_media_upload_loop():
    from utils.upload_materials_to_meta_and_update_registry import \
            upload_materials_to_meta_and_update_registry

    def loop():
        while True:
            token = get_token()                      # –≤—Å–µ–≥–¥–∞ —Å–∞–º—ã–π –Ω–æ–≤—ã–π
            try:
                logger.info("‚è´ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤‚Ä¶")
                upload_materials_to_meta_and_update_registry(token)
            except Exception as e:
                logger.error(f"üí• –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {e}")
            time.sleep(86400)
    threading.Thread(target=loop, daemon=True).start()
    
# –∑–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
start_token_check_loop()
start_media_upload_loop()
def start_supabase_ping_loop(interval_hours: int = 12):
    def loop():
        while True:
            try:
                ping_supabase()
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Supabase ping error: {e}")
            time.sleep(interval_hours * 3600)
    threading.Thread(target=loop, daemon=True).start()

start_supabase_ping_loop()

def cleanup_temp_files():
    tmp_path = "/tmp"
    if os.path.exists(tmp_path):
        for fname in os.listdir(tmp_path):
            if fname.endswith(('.wav', '.mp3', '.ogg')):
                try:
                    os.remove(os.path.join(tmp_path, fname))
                    logger.info(f"ü•π –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {fname}")
                except Exception as e:
                    logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {fname}: {e}")
    for fname in os.listdir("tmp"):
        if fname.startswith("app_start_") and fname.endswith(".log"):
            try:
                os.remove(os.path.join("tmp", fname))
            except Exception as e:
                logger.warning(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ –ª–æ–≥–∞ {fname}: {e}")

def start_memory_cleanup_loop():
    guni = logging.getLogger("gunicorn.error")
    def loop():
        while True:
            time.sleep(600)
            gc.collect()
            mb = psutil.Process().memory_info().rss / 1024 / 1024
            msg = f"üß† –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–∞—è –ø–∞–º—è—Ç—å {mb:.2f} MB"
            # –ü–∏—à–µ–º –¢–û–õ–¨–ö–û –≤ –æ–¥–∏–Ω –ª–æ–≥–≥–µ—Ä (gunicorn.error) ‚Äî –ø–æ–ø–∞–¥—ë—Ç –≤ –∫–æ–Ω—Å–æ–ª—å Render.
            # –í —Ñ–∞–π–ª –∑–∞–ø–∏—Å—å –ø—Ä–∏–¥—ë—Ç —á–µ—Ä–µ–∑ propagate root? –ù–µ—Ç. –ü–æ—ç—Ç–æ–º—É –¥—É–±–ª–∏—Ä—É–µ–º –≤ root –≤—Ä—É—á–Ω—É—é.
            logging.getLogger().info(msg)   # –≤ —Ñ–∞–π–ª
            guni.info(msg)                  # –≤ –∫–æ–Ω—Å–æ–ª—å
    threading.Thread(target=loop, daemon=True).start()
start_memory_cleanup_loop()
def log_memory_usage():
    process = psutil.Process()
    mem_mb = process.memory_info().rss / 1024 / 1024
    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º–∞—è –ø–∞–º—è—Ç—å: {mem_mb:.2f} MB")

# --------------- DEBUG: tail current log ------------------------------
@app.route("/debug/tail")
def debug_tail():
    import os, glob
    LOG_DIR = "/tmp/logs"
    # –∏—â–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π *.log –≤ –∫–∞—Ç–∞–ª–æ–≥–µ
    pattern = os.path.join(LOG_DIR, "log*")          # –ª–æ–≤–∏–º –∏ ¬´log¬ª, –∏ ¬´log.2025-07-31.log¬ª
    files = sorted(glob.glob(pattern))
    if not files:
        return f"–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω (–∏—â—É –ø–æ {pattern})", 404

    latest = files[-1]   # —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π
    # —á–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ ¬±400 —Å—Ç—Ä–æ–∫
    try:
        with open(latest, "r", encoding="utf-8") as f:
            tail = f.readlines()[-400:]
        return "<pre style='font-size:12px'>" + "".join(tail) + "</pre>"
    except Exception as e:
        return f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ª–æ–≥: {e}", 500

# ---------------------------------------------------------------------
@app.route('/', methods=['GET'])
def home():
    logger.info("üè† –ó–∞–ø—Ä–æ—Å GET /")
    return "–°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç!"

@app.route("/debug/upload-log")
def manual_log_upload():
    from logger import upload_to_s3_manual
    upload_to_s3_manual()
    return "–ó–∞–≥—Ä—É–∑–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ (–µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª)", 200

@app.route("/ping")
def ping():
    logger.info("üîî –ó–∞–ø—Ä–æ—Å PING")
    return "OK", 200

@app.route('/webhook', methods=['GET', 'POST'])
def webhook():
    if request.method == 'GET':
        mode = request.args.get('hub.mode')
        token = request.args.get('hub.verify_token')
        challenge = request.args.get('hub.challenge')

        if mode == 'subscribe' and token == VERIFY_TOKEN:
            logger.info("WEBHOOK VERIFIED")
            return challenge, 200
        else:
            logger.error("VERIFICATION FAILED")
            return "Verification failed", 403

    elif request.method == 'POST':
        # ‚ûä¬†–°—ã—Ä–æ–π payload, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∞–ª—å–Ω—ã–π‚ÄØuser_id¬†–∏¬†—É–±–µ–¥–∏—Ç—å—Å—è,
        #    —á—Ç–æ –æ–Ω¬†—Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å¬†ADMIN_NUMBERS
        logger.info("üì© webhook raw json: %s", request.get_json())

        data = request.json
        logger.info("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: %s", data)

        if data.get('object') == 'whatsapp_business_account':
            for entry in data.get('entry', []):
                for change in entry.get('changes', []):
                    value = change.get('value', {})

                    for message in value.get('messages', []):
                        handle_message(
                            message,
                            value['metadata']['phone_number_id'],
                            value['metadata']['display_phone_number'],
                            value.get('contacts', [])
                        )

                    for status in value.get('statuses', []):
                        handle_status(status)

        return jsonify({"status": "success"}), 200

@app.route("/debug/mem")
def debug_mem():
    import psutil, gc
    gc.collect()
    mb = psutil.Process().memory_info().rss / 1024 / 1024
    msg = f"üß† (manual) {mb:.2f} MB"
    logging.getLogger().info(msg)           # —Ñ–∞–π–ª
    logging.getLogger("gunicorn.error").info(msg)  # –∫–æ–Ω—Å–æ–ª—å
    return f"{mb:.2f} MB", 200

def handle_message(message, phone_number_id, bot_display_number, contacts):
    from_number = message.get("from")
    meta_msg_id = message.get("id")           # <-- –¥–æ–±–∞–≤–∏–ª–∏
    meta_ts     = int(message.get("timestamp", time.time()))

    if from_number.endswith(bot_display_number[-9:]):
        logger.info("üîÅ –≠—Ö–æ-—Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∞–º–æ–≥–æ —Å–µ–±—è ‚Äî –ø—Ä–æ–ø—É—â–µ–Ω–æ")
        return

    normalized_number = normalize_for_meta(from_number)
    name = contacts[0].get("profile", {}).get("name") if contacts else "–¥—Ä—É–≥"

    if message.get("type") == "text":
        text = message.get("text", {}).get("body", "").strip()
        process_text_message(text, normalized_number, phone_number_id, name,
                             meta_message_id=meta_msg_id, meta_ts=meta_ts)

    elif message.get("type") == "audio":
        logger.info("üé§ –ê—É–¥–∏–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –Ω–∞ —Ñ–æ–Ω –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
        threading.Thread(
            target=handle_audio_async,
            args=(message, phone_number_id, normalized_number, name),
            daemon=True
        ).start()
    elif message.get("type") in ("image", "document"):
        logger.info("üñº –ü–æ–ª—É—á–µ–Ω–æ media‚Äë—Å–æ–æ–±—â–µ–Ω–∏–µ (%s)", message["type"])
        threading.Thread(
            target=handle_media_async,
            args=(message, phone_number_id, normalized_number),
            daemon=True
        ).start()

def handle_audio_async(message, phone_number_id, normalized_number, name):
    try:
        audio_id = message["audio"]["id"]
        logger.info(f"üéø –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞, media ID: {audio_id}")

        url = f"https://graph.facebook.com/v15.0/{audio_id}"
        headers = {"Authorization": f"Bearer {get_token()}"}
        resp = requests.get(url, headers=headers, timeout=10)
        resp.raise_for_status()
        media_url = resp.json().get("url")

        media_resp = requests.get(media_url, headers=headers, timeout=30)
        media_resp.raise_for_status()
        audio_path = "/tmp/audio.ogg"
        with open(audio_path, "wb") as f:
            f.write(media_resp.content)

        audio = AudioSegment.from_file(audio_path)
        duration_sec = len(audio) / 1000
        logger.info(f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞—É–¥–∏–æ: {duration_sec:.1f} —Å–µ–∫—É–Ω–¥")

        if duration_sec > 60:
            logger.warning("‚ö†Ô∏è –ê—É–¥–∏–æ –ø—Ä–µ–≤—ã—à–∞–µ—Ç 60 —Å–µ–∫—É–Ω–¥")
            send_text_message(phone_number_id, normalized_number,
                              "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –¥–ª–∏–Ω–Ω–µ–µ 1 –º–∏–Ω—É—Ç—ã.")
            return

        with open(audio_path, "rb") as audio_file:
            transcript = client.audio.transcriptions.create(
                model="whisper-1",
                file=audio_file,
                response_format="text"
            )
        logger.info(f"üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {transcript}")
        text = transcript.strip()
        if text:
            message_uid = message.get("id")
            message_ts = int(message.get("timestamp", "0") or 0)
            process_text_message(text, normalized_number, phone_number_id, name, message_uid, message_ts)

        if text:
            process_text_message(text, normalized_number, phone_number_id, name)

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Ñ–æ–Ω–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∞—É–¥–∏–æ: {e}")

def handle_media_async(message, phone_number_id, user_id):
    from state.state import get_state, update_state
    from utils.check_payment_validity import validate_payment
    import tempfile, os

    media_type  = message["type"]
    media_obj   = message[media_type]
    media_id    = media_obj.get("id")
    caption     = media_obj.get("caption") or ""
    caption_low = caption.lower().strip()

    # üÜî + ‚è±Ô∏è –±–µ—Ä—ë–º UID —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç Meta –∏ –µ–≥–æ timestamp
    message_uid = message.get("id") or media_id         # —É media –±—ã–≤–∞–µ—Ç, —á—Ç–æ id —Å–æ–≤–ø–∞–¥–∞–µ—Ç
    try:
        message_ts = int(message.get("timestamp", time.time()))
    except Exception:
        message_ts = int(time.time())

    # ‚öôÔ∏è –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å/–¥–µ–¥—É–ø ‚Äî –°–¢–ê–í–ò–ú –ü–ï–†–ï–î –°–ï–¢–ï–í–´–ú–ò –ó–ê–ü–†–û–°–ê–ú–ò
    st = get_state(user_id) or {}
    if st.get("last_incoming_id") == message_uid:
        logger.info(f"[media] duplicate from Meta ignored user={user_id} msg={message_uid}")
        return
    # (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) –æ—Ç–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–∏–ª—å–Ω–æ —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if st.get("last_incoming_ts") and message_ts < st["last_incoming_ts"] - 5:
        logger.info(f"[media] old message ignored user={user_id} msg={message_uid}")
        return

    # —Ñ–∏–∫—Å–∏—Ä—É–µ–º, —á—Ç–æ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ö–æ–¥—è—â–µ–µ
    update_state(user_id, {
        "last_incoming_id": message_uid,
        "last_incoming_ts": message_ts,
        "last_sender": "user"
    })

    headers = {"Authorization": f"Bearer {get_token()}"}

    # --- 1. –ü–æ–ª—É—á–∞–µ–º file_url ---
    try:
        meta_url  = f"https://graph.facebook.com/v17.0/{media_id}"
        meta_resp = requests.get(meta_url, headers=headers, timeout=10)
        meta_resp.raise_for_status()
        file_url = meta_resp.json()["url"]
    except Exception as e:
        logger.error(f"[media] cannot obtain URL for media {media_id}: {e}")
        return

    # (–≤—Å—ë –æ—Å—Ç–∞–ª—å–Ω–æ–µ ‚Äî –∫–∞–∫ –±—ã–ª–æ)
    st = get_state(user_id) or {}

    payment_markers = ("—á–µ–∫", "kaspi", "–æ–ø–ª–∞—Ç", "–ø–µ—Ä–µ–≤–æ–¥", "transaction", "payment", "–±–∞–Ω–∫", "bank")
    celebrant_markers = ("–∏–º–µ–Ω–∏–Ω", "—Ä–µ–±–µ–Ω", "—Ä–µ–±—ë–Ω", "—Å—ã–Ω", "–¥–æ—á", "–¥–æ—á—å",
                         "–º–∞–ª—å—á–∏–∫", "–¥–µ–≤–æ—á", "child", "birthday", "—Ñ–æ—Ç–æ")

    def has_payment_markers(c: str) -> bool:
        return any(w in c for w in payment_markers)

    def has_celebrant_markers(c: str) -> bool:
        if has_payment_markers(c):
            return False
        return any(w in c for w in celebrant_markers)

    def _store_raw_payment_stub():
        update_state(user_id, {
            "payment_proof_url": file_url,
            "payment_media_id": media_id,
            "last_message_ts": time.time()
        })
        logger.info(f"[media] stored potential payment (stub) user={user_id}")

    def _store_celebrant_photo():
        update_state(user_id, {
            "celebrant_photo_id": media_id,
            "celebrant_photo_url": file_url,
            "has_photo": True,
            "last_message_ts": time.time()
        })
        logger.info(f"[media] stored celebrant photo user={user_id}")

    stored = False

    # --- –í–µ—Ç–∫–∞ 1: —è–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –æ–ø–ª–∞—Ç—ã ---
    if (not stored) and (not st.get("payment_proof_url")) and has_payment_markers(caption_low):
        _store_raw_payment_stub()
        stored = True

    # --- –í–µ—Ç–∫–∞ 2: —è–≤–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã –∏–º–µ–Ω–∏–Ω–Ω–∏–∫–∞ ---
    if (not stored) and (not st.get("celebrant_photo_id")) and has_celebrant_markers(caption_low):
        _store_celebrant_photo()
        stored = True

    # --- –í–µ—Ç–∫–∞ 3: –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ / –ø—É—Å—Ç–æ ---
    if not stored:
        empty_or_neutral = (
            caption_low == "" or
            (not has_payment_markers(caption_low) and not has_celebrant_markers(caption_low))
        )

        if empty_or_neutral:
            if not st.get("payment_proof_url"):
                # —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –∫–∞–∫ —á–µ–∫
                try:
                    r = requests.get(file_url, timeout=20)
                    r.raise_for_status()
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".jpg") as tmp:
                        tmp.write(r.content)
                        tmp_path = tmp.name
                    result = validate_payment(tmp_path, min_amount=30000)
                    os.remove(tmp_path)

                    if result.get("valid"):
                        update_state(user_id, {
                            "payment_proof_url": file_url,
                            "payment_media_id": media_id,
                            "payment_valid": True,
                            "payment_issues": result.get("issues", []),
                            "last_message_ts": time.time()
                        })
                        logger.info(f"[media] ambiguous -> validated as payment user={user_id}")
                        stored = True
                    else:
                        # –Ω–µ–≤–∞–ª–∏–¥–Ω–æ: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ (–µ—Å–ª–∏ –Ω–µ—Ç)
                        if not st.get("celebrant_photo_id"):
                            _store_celebrant_photo()
                            stored = True
                        else:
                            _store_raw_payment_stub()
                            stored = True
                except Exception as e:
                    logger.error(f"[media] ambiguous validation error user={user_id}: {e}")
                    # –Ω–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å ‚Äî —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π —á–µ–∫
                    if not st.get("payment_proof_url"):
                        _store_raw_payment_stub()
                        stored = True
            else:
                # —á–µ–∫ —É–∂–µ –µ—Å—Ç—å, –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å –∫–∞–∫ —Ñ–æ—Ç–æ
                if not st.get("celebrant_photo_id"):
                    _store_celebrant_photo()
                    stored = True

    # --- Fallback ---
    if not stored:
        _store_raw_payment_stub()

    # --- –ü–µ—Ä–µ—Ö–æ–¥ –≤ block7 ---
    from router import route_message
    route_message("", user_id, force_stage="block7")

def process_text_message(text: str,
                         normalized_number: str,
                         phone_number_id: str,
                         name: str | None,
                         meta_message_id: str | None = None,
                         meta_ts: int | None = None):
    from state.state import get_state, update_state, save_if_absent
    if not text:
        return

    st = get_state(normalized_number) or {}

    # --- –ñ–Å–°–¢–ö–ò–ô –¥–µ–¥—É–ø –ø–æ message_id –æ—Ç Meta
    if meta_message_id and st.get("last_incoming_id") == meta_message_id:
        logger.info(f"[router] drop duplicate by meta_id user={normalized_number} id={meta_message_id}")
        return

    # --- –ú–Ø–ì–ö–ò–ô –¥–µ–¥—É–ø –ø–æ –æ–¥–∏–Ω–∞–∫–æ–≤–æ–º—É —Ç–µ–∫—Å—Ç—É –≤ –æ—á–µ–Ω—å —É–∑–∫–æ–º –æ–∫–Ω–µ (1 —Å–µ–∫),
    #     —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –±—ã–ª —Ç–æ–∂–µ "user" –∏ stage –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
    now_ts = int(time.time())
    same_text = (text == st.get("last_incoming_text"))
    very_recent = (now_ts - int(st.get("last_incoming_ts", 0)) <= 1)
    same_stage = (st.get("stage") == st.get("last_incoming_stage"))
    if same_text and very_recent and st.get("last_sender") == "user" and same_stage:
        logger.info(f"[router] drop near-duplicate by text window user={normalized_number}")
        return

    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Ö–æ–¥—è—â–µ–º
    update_state(normalized_number, {
        "last_incoming_id": meta_message_id or "",
        "last_incoming_ts": meta_ts or now_ts,
        "last_incoming_text": text,
        "last_incoming_stage": st.get("stage"),
        "last_sender": "user",
    })

    # --- –¥–∞–ª—å—à–µ –≤–∞—à —Ç–µ–∫—É—â–∏–π –∫–æ–¥:
    save_if_absent(normalized_number,
                   normalized_number=normalized_number,
                   raw_number=normalized_number,
                   client_name=name or "")

    try:
        route_message(text, normalized_number, client_name=name)
    except Exception as e:
        logger.exception(f"üí• –û—à–∏–±–∫–∞ route_message –¥–ª—è {normalized_number}: {e}")
        send_text_message(phone_number_id, normalized_number,
                          "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def normalize_for_meta(number):
    if number.startswith('77'):
        return '787' + number[2:]
    if number.startswith('79'):
        return '789' + number[2:]
    return number

def send_text_message(phone_number_id, to, text):
    url = API_URL.format(phone_number_id=phone_number_id)
    headers = {"Authorization": f"Bearer {get_token()}", 
               "Content-Type": "application/json"}
    payload = {
        "messaging_product": "whatsapp",
        "to": to,
        "type": "text",
        "text": {"body": text}
    }
    response = requests.post(url, headers=headers, json=payload)
    resp_text = response.text[:500] + "..." if len(response.text) > 500 else response.text
    logger.info(f"‚û°Ô∏è WhatsApp {to}, —Å—Ç–∞—Ç—É—Å: {response.status_code}, –æ—Ç–≤–µ—Ç: {resp_text}")


def handle_status(status):
    logger.info("üì• –°—Ç–∞—Ç—É—Å: %s", status)

if __name__ == '__main__':
    logger.debug("üöÄ –ó–∞–ø—É—Å–∫ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ __main__")
    try:
        logger.info("üì° –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞ Flask...")
        app.run(host='0.0.0.0', port=5000)
    except Exception as e:
        logger.exception("üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
