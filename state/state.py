import logging, threading
# –°–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á ‚Äî –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –∑–Ω–∞—á–µ–Ω–∏–µ ‚Äî —Å–æ—Å—Ç–æ—è–Ω–∏–µ
user_states = {}


def get_state(user_id):
    return user_states.get(user_id)

def set_state(user_id, state):
    user_states[user_id] = state

def reset_state(user_id):
    user_states.pop(user_id, None)

def update_state(user_id, updates: dict):
    current = get_state(user_id) or {}
    current.update(updates)
    set_state(user_id, current)
    # ---------------------------------------------------------------------------
# Helper: –∫–ª–∞–¥—ë–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –ø—É—Å—Ç–æ
def save_if_absent(user_id, **kwargs):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–∞—Ä—ã –∫–ª—é—á-–∑–Ω–∞—á–µ–Ω–∏–µ, –Ω–æ **—Ç–æ–ª—å–∫–æ** –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –∫–ª—é—á–∞ –µ—â—ë –Ω–µ—Ç
    –∏–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π/None/''.
    """
    st = get_state(user_id) or {}
    fresh = {k: v for k, v in kwargs.items() if not st.get(k)}
    if fresh:
        update_state(user_id, fresh)

#  –ù–æ–≤—ã–π –º–µ—Ç–æ–¥:¬†–ø–æ–ª–Ω—ã–π —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def delete_state(user_id: str) -> None:
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–±—Ä–∞—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    (state + –ª—é–±—ã–µ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–µ —Å–Ω–∞–ø—à–æ—Ç—ã, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å).
    """
    user_states.pop(user_id, None)

    # –µ—Å–ª–∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç–µ —Å–Ω–∞–ø—à–æ—Ç—ã –≥–¥–µ‚Äë—Ç–æ –µ—â—ë (S3, Postgres) ‚Äî
    # –¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏.

    logging.getLogger(__name__).info("üóë  state for %s deleted via #reset", user_id)