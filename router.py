from utils.env_loader import ensure_env_loaded
ensure_env_loaded()
import os
import inspect
import time
from state.state import get_state, update_state
from logger import logger
from utils.whatsapp_senders import send_text, send_document, send_video, send_image
from utils.lang_detect import detect_lang, is_russian, is_affirmative, is_negative
from utils.lang_prompt import build_lang_switch_message

# ===== –±–ª–æ–∫–∏ ===============================================================
from blocks import (
    block_01, block_02,
    block_03a, block_03b, block_03c, block_03d,
    block_04,            # –æ—Å—Ç–∞–ª—Å—è –∫–∞–∫ –µ—Å—Ç—å
    block_05,            # –Ω–æ–≤—ã–π: —Ä–∞–Ω—å—à–µ –±—ã–ª block_09 (handover)
    block_06,            # –Ω–æ–≤—ã–π: —Ä–∞–Ω—å—à–µ –±—ã–ª block_10 (–∏—Ç–æ–≥/—Ñ–∏–Ω–∞–ª –∏ —Ç.–ø.)
)

# ‚îÄ‚îÄ —á–∏—Ç–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω-–Ω–æ–º–µ—Ä–æ–≤ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
ADMIN_NUMBERS = {
    num.strip() for num in os.getenv("ADMIN_NUMBERS", "").split(",") if num.strip()
}

# --- <stage> ‚Üí (module, handler_name) --------------------------------------
BLOCK_MAP = {
    "block1":  (block_01,  "handle_block1"),
    "block2":  (block_02,  "handle_block2"),  # –∑–∞–≥–ª—É—à–∫–∞, —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π handler –±—É–¥–µ—Ç –≤—ã–±—Ä–∞–Ω –Ω–∏–∂–µ
    "block3a": (block_03a, "handle_block3a"),
    "block3b": (block_03b, "handle_block3b"),
    "block3c": (block_03c, "handle_block3c"),
    "block3d": (block_03d, "handle_block3d"),
    "block4":  (block_04,  "handle_block4"),
    # 9 ‚Üí 5
    "block5":  (block_05,  "handle_block5"),
    # 10 ‚Üí 6
    "block6":  (block_06,  "handle_block6"),
}

def _response(user_id: str) -> dict:
    """
    –ï–¥–∏–Ω—ã–π –æ—Ç–≤–µ—Ç —Ä–æ—É—Ç–µ—Ä–∞: –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â–∏–π stage –∏–∑ state.
    –ï—Å–ª–∏ stage –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω (—Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –∫–æ–Ω—Ç–∞–∫—Ç) ‚Äî –≤–µ—Ä–Ω—ë—Ç—Å—è None.
    """
    st = get_state(user_id) or {}
    stage = st.get("stage")
    # next_step: –µ—Å–ª–∏ –±–ª–æ–∫ –Ω–µ –ø–æ–ª–æ–∂–∏–ª —è–≤–Ω—ã–π next_step,
    # –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è (block1) —Å—á–∏—Ç–∞–µ–º —á—Ç–æ —ç—Ç–æ "hello"
    next_step = st.get("next_step")
    if not next_step and stage == "block1":
        next_step = "hello"
    return {"ok": True, "stage": stage, "next_step": next_step}

def route_message(text: str, normalized_number: str, client_name: str | None = None, message_uid: str | None = None, message_ts: int | None = None, force_stage: str | None = None):
    """–ï–¥–∏–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å: –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ _route_message_impl."""
    return _route_message_impl(
        message_text=text,
        user_id=normalized_number,
        client_name=client_name,
        force_stage=force_stage,
        message_uid=message_uid,
        message_ts=message_ts,
    )
# ---------------------------------------------------------------------------
def _route_message_impl(
    message_text: str,
    user_id: str,
    client_name: str | None = None,
    *,
    force_stage: str | None = None,
    message_uid: str | None = None,   # –∏–∑ –≤–µ–±—Ö—É–∫–∞
    message_ts: float | None = None,  # epoch seconds –∏–∑ –≤–µ–±—Ö—É–∫–∞
):
    """
    ¬∑ –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    ¬∑ –ò–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å/—Ñ–∏–ª—å—Ç—Ä—ã –≤—Ö–æ–¥—è—â–∏—Ö
    ¬∑ –ì–æ—Ç–æ–≤–∏–º callables –¥–ª—è WhatsApp
    ¬∑ –î–µ—Ä–≥–∞–µ–º –Ω—É–∂–Ω—ã–π handler-–±–ª–æ–∫
    """
    # -------- –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω—É–∂–Ω—ã –ü–ï–†–ï–î #reset) ------------
    wa_to = (get_state(user_id) or {}).get("normalized_number", user_id)
    send_text_func     = lambda body:     send_text(wa_to, body)
    send_document_func = lambda media_id: send_document(wa_to, media_id)
    send_video_func    = lambda media_id: send_video(wa_to, media_id)

    # ---------- —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ "#reset" (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞) ----------
    if message_text.strip() == "#reset":
        if user_id in ADMIN_NUMBERS:
            from state.state import delete_state
            delete_state(user_id)

            for mod_name in ("blocks.block_03a", "blocks.block_03b", "blocks.block_03c"):
                try:
                    mod = __import__(mod_name, fromlist=["DATE_DECISION_FLAGS"])
                    getattr(mod, "DATE_DECISION_FLAGS", {}).pop(user_id, None)
                except Exception:
                    pass

            # üßπ —á–∏—Å—Ç–∏–º –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–∂–æ–±—ã
            from utils.reminder_engine import sched
            for job in sched.get_jobs():
                if job.id.startswith(f"{user_id}:"):
                    sched.remove_job(job.id)

            send_text(wa_to, "State cleared.")
        else:
            logger.warning("Ignored #reset from non-admin %s", user_id)
            send_text(wa_to, "–ö–æ–º–∞–Ω–¥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.")
        return _response(user_id)

    elif message_text.strip() == "#jobs" and user_id in ADMIN_NUMBERS:
        from utils.reminder_engine import sched
        jobs = "\n".join(j.id for j in sched.get_jobs())
        send_text(wa_to, jobs or "–Ω–µ—Ç job-–æ–≤")
        return _response(user_id)

    # --------- –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å –∏ –∑–∞—â–∏—Ç–∞ –æ—Ç ¬´—Å—Ç–∞—Ä—ã—Ö¬ª –≤—Ö–æ–¥—è—â–∏—Ö -------------
    state = get_state(user_id) or {}

    # –Ω–æ—Ä–º–∞–ª–∏–∑—É–µ–º ts –∏–∑ Meta (–º–æ–∂–µ—Ç –ø—Ä–∏–π—Ç–∏ —Å—Ç—Ä–æ–∫–æ–π)
    now = time.time()
    try:
        message_ts = float(message_ts) if message_ts is not None else None
    except Exception:
        message_ts = None

    msg_norm = (message_text or "").strip().lower()
    msg_hash = __import__("hashlib").sha1(msg_norm.encode("utf-8")).hexdigest()

    last_uid  = state.get("last_msg_uid")
    last_hash = state.get("last_msg_hash")
    last_seen = state.get("last_msg_ts") or 0.0

    # –õ–∏–º–∏—Ç—ã
    DUP_WINDOW_SEC  = int(os.getenv("DUP_WINDOW_SEC", "120"))
    LATE_DROP_MIN   = int(os.getenv("LATE_DROP_MIN",  "20"))
    LATE_DROP_SEC   = LATE_DROP_MIN * 60

    logger.info(
        f"[router] inbox user={user_id} uid={message_uid} ts={message_ts} "
        f"last_uid={last_uid} last_ts={last_seen} hash={msg_hash[:7]}"
    )

    if message_ts and last_seen and (message_ts < (last_seen - LATE_DROP_SEC)) and not force_stage:
        lag_sec = int(last_seen - message_ts)
        logger.info(
            f"[router] drop late message user={user_id} lag={lag_sec}s "
            f"(threshold={LATE_DROP_SEC}s)"
        )
        return _response(user_id)

    update_state(user_id, {
        "last_msg_uid":  message_uid or last_uid,
        "last_msg_hash": msg_hash,
        "last_msg_ts":   message_ts or now,
    })

    # --------- –æ–ø—Ä–µ–¥–µ–ª–∏–º stage –∏ –æ–±–Ω–æ–≤–∏–º sender ----------------------------
    stage = force_stage or state.get("stage", "block1")

    update_state(user_id, {
        "last_sender": "bot" if force_stage else "user"
    })
    last_sender = "bot" if force_stage else "user"
    logger.info(f"üìç route_message ‚Üí user={user_id} stage={stage}")

    # -------- –∫–∞–Ω–∞–ª –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –ê—Ä—Å–µ–Ω–∏—é ----------------------------------
    OWNER_WA_ID = "787057065073"
    send_owner_text  = lambda body: send_text(OWNER_WA_ID, body)
    def send_owner_media(media_id: str):
        try:
            send_image(OWNER_WA_ID, media_id)
        except Exception as e_img:
            logger.warning(f"[router] send_owner_media image failed ({e_img}); retry as document")
            try:
                send_document(OWNER_WA_ID, media_id)
            except Exception as e_doc:
                logger.error(f"[router] send_owner_media document also failed: {e_doc}")
    # -------- —è–∑—ã–∫–æ–≤–æ–π –≥–µ–π—Ç (UC1: –¥–µ—Ç–µ–∫—Ç —è–∑—ã–∫–∞ / –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ RU) ---------
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –¥–ª—è –≤—Ö–æ–¥—è—â–∏—Ö –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–µ –¥–ª—è bot-–∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —à–∞–≥–æ–≤)
    if last_sender == "user":
        # –µ—Å–ª–∏ —É–∂–µ –∂–¥—ë–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —è–∑—ã–∫–∞ ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        if state.get("lang_check_pending"):
            lang = state.get("detected_lang", "en")
            # –∫–æ—Ä–æ—Ç–∫–∏–µ —ç–≤—Ä–∏—Å—Ç–∏–∫–∏ "–¥–∞/–Ω–µ—Ç" –Ω–∞ —è–∑—ã–∫–µ –∫–ª–∏–µ–Ω—Ç–∞ (+EN –∫–∞–∫ fallback)
            if is_affirmative(message_text, lang):
                update_state(user_id, {
                    "lang_check_pending": False,
                    "lang_confirmed": True,
                })
                logger.info(f"[router] lang confirmed ‚Üí RU by user={user_id}")
            elif is_negative(message_text, lang):
                # –æ—Ç–∫–∞–∑ ‚Üí —Ö–µ–Ω–¥–æ–≤–µ—Ä –≤–ª–∞–¥–µ–ª—å—Ü—É (–ø—Ä–∏—á–∏–Ω–∞: lang_declined)
                update_state(user_id, {
                    "handover_reason": "lang_declined",
                    "stage": "block5",  # –±—ã–≤—à–∏–π block9
                })
                try:
                    send_text(wa_to, "–ü–µ—Ä–µ–¥–∞—é –¥–∏–∞–ª–æ–≥ –ê—Ä—Å–µ–Ω–∏—é. –°–ø–∞—Å–∏–±–æ!")
                except Exception:
                    pass
                return _response(user_id)
            else:
                # –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ–º –¥–≤—É—è–∑—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–¥–∏–Ω —Ä–∞–∑
                try:
                    send_text(wa_to, build_lang_switch_message(lang))
                except Exception:
                    pass
                return _response(user_id)
        else:
            # –ø–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞ —Ä—É—Å—Å–∫–æ–º ‚Äî –ø–æ–ø—Ä–æ—Å–∏–º –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ RU
            if not is_russian(message_text):
                lang = detect_lang(message_text)
                update_state(user_id, {
                    "lang_check_pending": True,
                    "detected_lang": lang,
                })
                send_text(wa_to, build_lang_switch_message(lang))
                return _response(user_id)


    # -------- –≤—ã–±–∏—Ä–∞–µ–º handler –¥–ª—è –±–ª–æ–∫–∞ -----------------------------------
    if stage == "block2":
        if force_stage:
            handler = block_02.handle_block2
            logger.info(f"üìç router: –∑–∞–ø—É—Å–∫–∞–µ–º handle_block2 (–±–æ—Ç –∏–Ω–∏—Ü–∏–∏—Ä—É–µ—Ç)")
        else:
            handler = block_02.handle_block2_user_reply
            logger.info(f"üìç router: –∑–∞–ø—É—Å–∫–∞–µ–º handle_block2_user_reply (–æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç–∞)")
    else:
        mod, handler_name = BLOCK_MAP.get(stage, BLOCK_MAP["block1"])
        handler = getattr(mod, handler_name)

    # -------- –≤—ã–∑–æ–≤ handler -------------------------------------------------
    try:
        if stage == "block4":
            # block4 –ø—Ä–æ—Å–∏—Ç send_document –∏ send_video
            handler(message_text, user_id, send_text_func, send_document_func, send_video_func)
        elif stage == "block5":
            # —ç—Ç–æ –±—ã–≤—à–∏–π block9: –Ω—É–∂–µ–Ω –∫–∞–Ω–∞–ª –∫ –≤–ª–∞–¥–µ–ª—å—Ü—É
            handler(message_text, user_id, send_text_func, send_owner_text, send_owner_media)
        else:
            sig = inspect.signature(handler)
            args = [message_text, user_id, send_text_func]
            if len(sig.parameters) >= 4:
                args.append(time.time())  # client_request_date
            handler(*args)
    except Exception as e:
        logger.exception(f"üí• –û—à–∏–±–∫–∞ –≤ –±–ª–æ–∫–µ {stage} –¥–ª—è {user_id}: {e}")
        send_text_func("–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    return _response(user_id)