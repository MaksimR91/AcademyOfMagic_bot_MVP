import time
from utils.ask_openai import ask_openai
from utils.wants_handover_ai import wants_handover_ai
from state.state import get_state, update_state
from utils.reminder_engine import plan
from logger import logger

# –ü—É—Ç–∏ –∫ –ø—Ä–æ–º–ø—Ç–∞–º
GLOBAL_PROMPT_PATH = "prompts/global_prompt.txt"
STAGE_PROMPT_PATH = "prompts/block02_prompt.txt"
REMINDER_PROMPT_PATH = "prompts/block02_reminder_1_prompt.txt"
REMINDER_2_PROMPT_PATH = "prompts/block02_reminder_2_prompt.txt"
# –í—Ä–µ–º—è –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è (4 —á–∞—Å–∞)
DELAY_TO_BLOCK_2_1_HOURS = 4
DELAY_TO_BLOCK_2_2_HOURS = 12
FINAL_TIMEOUT_HOURS = 4

def is_message_informative(text: str) -> bool:
    text = text.lower()
    keywords = [
        "–¥–µ–Ω—å", "–¥—Ä", "—Å–≤–∞–¥—å–±", "–ø—Ä–∞–∑–¥–Ω", "–º–µ—Ä–æ–ø—Ä–∏—è—Ç", "–≤–µ—á–µ—Ä–∏–Ω",
        "–¥–µ—Ç", "–≤–∑—Ä–æ—Å–ª", "–≥–æ—Å—Ç", "—á–µ–ª–æ–≤–µ", "—à–æ—É", "–¥–µ—Ç—Å–∞–¥", "–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤", "—Ç—Ä—Ü"
    ]
    has_keywords = any(kw in text for kw in keywords)
    long_enough = len(text.strip().split()) >= 5
    return has_keywords and long_enough

def load_prompt(path):
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

global_prompt = load_prompt(GLOBAL_PROMPT_PATH)
stage_prompt = load_prompt(STAGE_PROMPT_PATH)

def proceed_to_block(stage_name, user_id):
    from router import route_message
    route_message("", user_id, force_stage=stage_name)

def handle_block2(message_text, user_id, send_reply_func):

    state = get_state(user_id)
    # –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
    if state.get("stage") == "block2" and state.get("block2_intro_sent"):
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    try:
        reply_to_client = ask_openai(global_prompt + "\n\n" + stage_prompt)
    except Exception as e:
        logger.info(f"[error] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç—É: {e}")
    send_reply_func(reply_to_client)

    update_state(user_id, {
        "stage": "block2",
        "block2_intro_sent": True,
        "last_sender": "bot",
        "last_message_ts": time.time()
    })

    plan(user_id,
         "blocks.block_02:send_first_reminder_if_silent",
         DELAY_TO_BLOCK_2_1_HOURS * 3600)
    return


def handle_block2_user_reply(message_text, user_id, send_reply_func):
    logger.info(f"[debug] üë§ handle_block2_user_reply: user={user_id}, text={message_text}")
    state = get_state(user_id)
    informative = is_message_informative(message_text)

    if not informative:
        count = state.get("uninformative_replies", 0) + 1

        if count > 2:
            update_state(user_id, {
                "handover_reason": "uninformative_x3",
                "scenario_stage_at_handover": "block2"
            })
            from router import route_message
            return route_message("", user_id, force_stage="block5")

        clarification_prompt = global_prompt + "\n\n" + stage_prompt + "\n\n" + \
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è. " \
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ ‚Äî —á–µ–π –ø—Ä–∞–∑–¥–Ω–∏–∫, —Å–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≥–æ—Å—Ç–µ–π, –≤–∑—Ä–æ—Å–ª—ã–µ —ç—Ç–æ –∏–ª–∏ –¥–µ—Ç–∏?"

        try:
            clarification_reply = ask_openai(clarification_prompt)
        except Exception as e:
            logger.info(f"[error] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏: {e}")
        send_reply_func(clarification_reply)

        update_state(user_id, {
            "uninformative_replies": count,
            "last_sender": "bot",
            "last_message_ts": time.time()
        })

        plan(user_id,
             "blocks.block_02:send_first_reminder_if_silent",
             DELAY_TO_BLOCK_2_1_HOURS * 3600)
        return

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    classification_prompt = f"""

–ö–ª–∏–µ–Ω—Ç –æ–ø–∏—Å–∞–ª –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–µ: "{message_text}"

–ó–∞–¥–∞—á–∞: –í—ã–≤–µ—Å—Ç–∏ –†–û–í–ù–û –û–î–ù–û —Å–ª–æ–≤–æ-–º–µ—Ç–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞:
–¥–µ—Ç—Å–∫–æ–µ | —Å–µ–º–µ–π–Ω–æ–µ | –≤–∑—Ä–æ—Å–ª–æ–µ | –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ | –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ

–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏ –ø—Ä–∞–≤–∏–ª–∞:
1) –î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è:
   - –≤–æ–∑—Ä–∞—Å—Ç 1‚Äì3 ‚Üí —Å–µ–º–µ–π–Ω–æ–µ
   - –≤–æ–∑—Ä–∞—Å—Ç 4‚Äì14 ‚Üí –¥–µ—Ç—Å–∫–æ–µ
   - –≤–æ–∑—Ä–∞—Å—Ç 15+ ‚Üí –≤–∑—Ä–æ—Å–ª–æ–µ
2) –î–µ—Ç—Å–∫–∏–π —Å–∞–¥ / —Å–∞–¥–∏–∫ / –≤—ã–ø—É—Å–∫–Ω–æ–π –≤ —Å–∞–¥—É ‚Üí –¥–µ—Ç—Å–∫–æ–µ
3) –ü—Ä–∞–∑–¥–Ω–∏–∫ –≤–æ –¥–≤–æ—Ä–µ:
   - –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –¥–µ—Ç–µ–π ‚Üí –¥–µ—Ç—Å–∫–æ–µ
   - –ø—Ä–∏–º–µ—Ä–Ω–æ –ø–æ—Ä–æ–≤–Ω—É –¥–µ—Ç–µ–π –∏ –≤–∑—Ä–æ—Å–ª—ã—Ö ‚Üí —Å–µ–º–µ–π–Ω–æ–µ
4) –°–≤–∞–¥—å–±–∞ / –∂–µ–Ω–∏—Ö / –Ω–µ–≤–µ—Å—Ç–∞ ‚Üí –≤–∑—Ä–æ—Å–ª–æ–µ
5) –í–°–Å –û–°–¢–ê–õ–¨–ù–û–ï ‚Üí –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
   –í —á–∞—Å—Ç–Ω–æ—Å—Ç–∏, —Ñ—Ä–∞–∑—ã –≤–∏–¥–∞ ¬´–∏–ª–ª—é–∑–∏–æ–Ω–Ω–æ–µ —à–æ—É¬ª, ¬´–Ω–∞ —Å—Ü–µ–Ω–µ/–≤ –∫–∞—Ñ–µ/–≤ –∫–ª—É–±–µ/–≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ¬ª,
   ¬´–¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö¬ª –ë–ï–ó —è–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –∏–∑ –ø—É–Ω–∫—Ç–æ–≤ 1‚Äì4 ‚Üí —Å—Ç—Ä–æ–≥–æ ¬´–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ¬ª.
6) –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ (—Ç–æ–ª—å–∫–æ ¬´–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ¬ª, ¬´—Ö–æ—á—É —à–æ—É¬ª –∏ —Ç.–ø.) ‚Üí –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ

–í–∞–∂–Ω–æ:
- –ò–≥–Ω–æ—Ä–∏—Ä—É–π —Å–∞–º–æ –ø–æ —Å–µ–±–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ ¬´–¥–ª—è –≤–∑—Ä–æ—Å–ª—ã—Ö¬ª, –µ—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –ø—Ä–∏–∑–Ω–∞–∫–∞ –∏–∑ –ø.1 (–¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è 15+) –∏–ª–∏ –ø.4 (—Å–≤–∞–¥—å–±–∞).
- –ù–ò–ö–ê–ö–ò–• –ø–æ—è—Å–Ω–µ–Ω–∏–π, –≤–æ–ø—Ä–æ—Å–æ–≤, –ø—Ä–∏–º–µ—Ä–æ–≤, –∑–Ω–∞–∫–æ–≤ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è ‚Äî –≤—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Å–ª–æ–≤–æ-–º–µ—Ç–∫—É.
"""
    logger.info(f"[debug] ü§ñ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è: message_text={message_text}")
    try:
        show_type = ask_openai(classification_prompt).strip().lower()
    except Exception as e:
        logger.info(f"[error] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
    show_type = show_type.replace(".", "").strip()
    logger.info(f"[debug] üß† –æ–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø —à–æ—É: {show_type}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if show_type == "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
        count = state.get("uninformative_replies", 0) + 1

        if count > 2:
            update_state(user_id, {
                "handover_reason": "classification_failed_x3",
                "scenario_stage_at_handover": "block2"
            })
            from router import route_message
            return route_message("", user_id, force_stage="block5")

        clarification_prompt = global_prompt + "\n\n" + stage_prompt + "\n\n" + \
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±—ã–ª–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. " \
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ: —á–µ–π –ø—Ä–∞–∑–¥–Ω–∏–∫, —Å–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π, –≤–∑—Ä–æ—Å–ª—ã–µ –∏–ª–∏ –¥–µ—Ç–∏?"

        try:
            clarification_reply = ask_openai(clarification_prompt)
        except Exception as e:
            logger.info(f"[error] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ 2: {e}")
        send_reply_func(clarification_reply)

        update_state(user_id, {
            "uninformative_replies": count,
            "last_sender": "bot",
            "last_message_ts": time.time()
        })

        plan(user_id,
             "blocks.block_02:send_first_reminder_if_silent",
             DELAY_TO_BLOCK_2_1_HOURS * 3600)
        return

    # –í—Å—ë –æ–∫ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω—É–∂–Ω—ã–π –±–ª–æ–∫
    update_state(user_id, {
        "show_type": show_type,
        "uninformative_replies": 0,
        "last_sender": "user",
        "last_message_ts": time.time()
    })

    if show_type == "–¥–µ—Ç—Å–∫–æ–µ":
        next_block = "block3a"
    elif show_type == "–≤–∑—Ä–æ—Å–ª–æ–µ":
        next_block = "block3b"
    elif show_type == "—Å–µ–º–µ–π–Ω–æ–µ":
        next_block = "block3c"
    elif show_type == "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ":
        next_block = "block3d"
    else:
        logger.info(f"[warn] ‚ùó–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —à–æ—É: {show_type}, fallback ‚Üí block5")
        next_block = "block5"  # fallback –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    from router import route_message
    return route_message(message_text, user_id, force_stage=next_block)


def send_first_reminder_if_silent(user_id, send_reply_func):
    state = get_state(user_id)
    if not state or state.get("stage") != "block2":
        return  # –ö–ª–∏–µ–Ω—Ç —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –∏–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è –±–ª–æ–∫ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    global_prompt = load_prompt(GLOBAL_PROMPT_PATH)
    reminder_prompt = load_prompt(REMINDER_PROMPT_PATH)
    full_prompt = global_prompt + "\n\n" + reminder_prompt

    reply = ask_openai(full_prompt)
    send_reply_func(reply)

    update_state(user_id, {"stage": "block2", "last_message_ts": time.time()})

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤ (–≤ –±–ª–æ–∫ 2.2)
    plan(user_id,
    "blocks.block_02:send_second_reminder_if_silent",   # <‚Äë‚Äë –ø—É—Ç—å –∫ —Ñ—É–Ω–∫—Ü–∏–∏
    DELAY_TO_BLOCK_2_2_HOURS * 3600)
    

def send_second_reminder_if_silent(user_id, send_reply_func):
    state = get_state(user_id)
    if not state or state.get("stage") != "block2":
        return  # –ö–ª–∏–µ–Ω—Ç —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    global_prompt = load_prompt(GLOBAL_PROMPT_PATH)
    reminder_prompt = load_prompt(REMINDER_2_PROMPT_PATH)
    full_prompt = global_prompt + "\n\n" + reminder_prompt

    reply = ask_openai(full_prompt)
    send_reply_func(reply)

    update_state(user_id, {"stage": "block2", "last_message_ts": time.time()})

    # –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä ‚Äî –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç –µ—â—ë 4 —á–∞—Å–∞, —É—Ö–æ–¥–∏–º –≤ block5
    def finalize_if_still_silent():
        state = get_state(user_id)
        if not state or state.get("stage") != "block2":
            return  # –û—Ç–≤–µ—Ç–∏–ª ‚Äî –≤—Å—ë –æ–∫
        update_state(user_id, {"handover_reason": "no_response_after_2_2", "scenario_stage_at_handover": "block2"})
        from router import route_message
        route_message("", user_id, force_stage="block5")

    plan(user_id,
    "blocks.block_02:finalize_if_still_silent",   # <‚Äë‚Äë –ø—É—Ç—å –∫ —Ñ—É–Ω–∫—Ü–∏–∏
    FINAL_TIMEOUT_HOURS * 3600)
