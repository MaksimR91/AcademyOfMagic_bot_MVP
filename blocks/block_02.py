import time
from utils.ask_openai import ask_openai
from utils.wants_handover_ai import wants_handover_ai
from utils.reminder_engine import plan
from state.state import update_state
from logger import logger
from importlib import import_module

# –ü—É—Ç–∏ –∫ –ø—Ä–æ–º–ø—Ç–∞–º
GLOBAL_PROMPT_PATH = "prompts/global_prompt.txt"
STAGE_PROMPT_PATH = "prompts/block02_prompt.txt"
REMINDER_PROMPT_PATH = "prompts/block02_reminder_1_prompt.txt"
REMINDER_2_PROMPT_PATH = "prompts/block02_reminder_2_prompt.txt"
CLASSIF_PROMPT_PATH = "prompts/block02_classification_prompt.txt"
# –í—Ä–µ–º—è –¥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∫–∞—Å–∞–Ω–∏—è (4 —á–∞—Å–∞)
DELAY_TO_BLOCK_2_1_HOURS = 4
DELAY_TO_BLOCK_2_2_HOURS = 12
FINAL_TIMEOUT_HOURS = 4

def load_prompt(path):
    with open(path, "r", encoding="utf-8") as f:
        return f.read()

def render_prompt(path: str, **kwargs) -> str:
    """
    –†–µ–Ω–¥–µ—Ä–∏–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–º–ø—Ç–∞ —Å –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞–º–∏ —á–µ—Ä–µ–∑ str.format().
    –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –≤ –ø—Ä–æ–º–ø—Ç–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã –∫–∞–∫ {{ }}.
    """
    tmpl = load_prompt(path)
    try:
        return tmpl.format(**kwargs)
    except Exception as e:
        logger.warning(f"[block02] format error in {path}: {e}")
        return tmpl  # –ª—É—á—à–µ –≤–µ—Ä–Ω—É—Ç—å —Å—ã—Ä–æ–π, —á–µ–º —É–ø–∞—Å—Ç—å
    
global_prompt = load_prompt(GLOBAL_PROMPT_PATH)
stage_prompt = load_prompt(STAGE_PROMPT_PATH)

def proceed_to_block(stage_name, user_id):
    from router import route_message
    route_message("", user_id, force_stage=stage_name)

def _state():
    """–í—Å–µ–≥–¥–∞ –±–µ—Ä—ë–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –º–æ–¥—É–ª—å —Å–æ—Å—Ç–æ—è–Ω–∏—è (–≤–∞–∂–Ω–æ –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –∏ –ø—Ä–æ–¥–∞)."""
    return import_module("state.state")

def _rule_based_label(text: str) -> str | None:
    """
    –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —à–æ—Ä—Ç–∫–∞—Ç—ã: –µ—Å–ª–∏ —è–≤–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª–∏ ‚Äî —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ—Ç–∫—É.
    –ò–Ω–∞—á–µ None ‚Üí –¥–∞–ª—å—à–µ —Ä–µ—à–∞–µ—Ç –ò–ò.
    """
    msg = text.lower()
    # 1) –î–µ—Ç—Å–∞–¥ ‚Üí –¥–µ—Ç—Å–∫–æ–µ
    if any(k in msg for k in [
        "–¥–µ—Ç—Å–∞–¥", "–¥–µ—Ç—Å–∞–¥—É", "–≤ –¥–µ—Ç—Å–∞–¥—É",
        "—Å–∞–¥–∏–∫", "–¥–µ—Ç—Å–∫–∏–π —Å–∞–¥", "–≤ –¥–µ—Ç—Å–∫–æ–º —Å–∞–¥—É",
        "–≤—ã–ø—É—Å–∫–Ω–æ–π –≤ —Å–∞–¥—É"
    ]):
        return "–¥–µ—Ç—Å–∫–æ–µ"
    # 2) –°–≤–∞–¥—å–±–∞/–∂–µ–Ω–∏—Ö/–Ω–µ–≤–µ—Å—Ç- ‚Üí –≤–∑—Ä–æ—Å–ª–æ–µ (—É—á–∏—Ç—ã–≤–∞–µ–º —Å–ª–æ–≤–æ—Ñ–æ—Ä–º—ã)
    if any(k in msg for k in ["—Å–≤–∞–¥—å–±", "–∂–µ–Ω–∏—Ö", "–Ω–µ–≤–µ—Å—Ç"]):
        return "–≤–∑—Ä–æ—Å–ª–æ–µ"
    # 3) –Ø–≤–Ω–æ —Å–µ–º–µ–π–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
    if any(k in msg for k in ["—Å–µ–º–µ–π–Ω", "–∫—Ä–µ—â–µ–Ω–∏"]):
        return "—Å–µ–º–µ–π–Ω–æ–µ"
    # 4) –ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤ / –∫–æ–≤–æ—Ä–∫–∏–Ω–≥ / –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è ‚Üí –ùE–°–¢–ê–ù–î–ê–†–¢–ù–û–ï (—Å–º. –∞–∫—Ç—É–∞–ª—å–Ω—ã–π DATASET)
    #    –í–∞–∂–Ω–æ: –ù–ï —Ç—Ä–∏–≥–≥–µ—Ä–∏–º –Ω–∞ "—Ä–µ—Å—Ç–æ—Ä–∞–Ω"/"–±–∞–Ω–∫–µ—Ç" —Å–∞–º–∏ –ø–æ —Å–µ–±–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å —é–±–∏–ª–µ–∏ –∏ —Å–≤–∞–¥—å–±—ã.
    if any(k in msg for k in ["–∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤", "–∫–æ–≤–æ—Ä–∫–∏–Ω–≥", "–ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü"]):
        return "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"
    # 5) –¢–†–¶/–¢–¶/—Å—Ü–µ–Ω–∞/—Ñ–æ–π–µ ‚Üí –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
    if any(k in msg for k in ["—Ç—Ä—Ü", "—Ç—Ü", "—Å—Ü–µ–Ω–∞", "—Ñ–æ–π–µ"]):
         return "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"
    return None

def handle_block2(message_text, user_id, send_reply_func):

    from router import route_message    
    if wants_handover_ai(message_text):
        update_state(user_id, {
            "handover_reason": "asked_handover",
            "scenario_stage_at_handover": "block2"
        })
        return route_message(message_text, user_id, force_stage="block5")

    state = _state()
    state_dict = state.get_state(user_id)
    # –µ—Å–ª–∏ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äî –Ω–µ –¥—É–±–ª–∏—Ä—É–µ–º
    if state_dict.get("stage") == "block2" and state_dict.get("block2_intro_sent"):
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑)
    reply_to_client = ""
    try:
        reply_to_client = ask_openai(global_prompt + "\n\n" + stage_prompt)
    except Exception as e:
        logger.info(f"[error] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –∫–ª–∏–µ–Ω—Ç—É: {e}")
    if reply_to_client:
        send_reply_func(reply_to_client)

    state.update_state(user_id, {
        "stage": "block2",
        "block2_intro_sent": True,
        "last_sender": "bot",
        "last_message_ts": time.time()
    })

    plan(user_id,
         "blocks.block_02:send_first_reminder_if_silent",
         DELAY_TO_BLOCK_2_1_HOURS * 3600)
    return


def handle_block2_user_reply(message_text, user_id, send_reply_func):
    logger.info(f"[debug] üë§ handle_block2_user_reply: user={user_id}, text={message_text}")
    state = _state()
    st = state.get_state(user_id) or {}
    # (0) –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —à–æ—Ä—Ç–∫–∞—Ç—ã: –µ—Å–ª–∏ —É–≤–µ—Ä–µ–Ω–Ω–æ —É–∑–Ω–∞–ª–∏ —Ç–∏–ø ‚Äî —Å—Ä–∞–∑—É –º–∞—Ä—à—Ä—É—Ç–∏–∑–∏—Ä—É–µ–º.
    rb = _rule_based_label(message_text)
    if rb:
        ts = time.time()
        state.update_state(user_id, {
            "show_type": rb,
            "uninformative_replies": 0,
            "last_sender": "user",
            "last_message_ts": ts
        })
        if rb == "–¥–µ—Ç—Å–∫–æ–µ":
            next_block = "block3a"
        elif rb == "–≤–∑—Ä–æ—Å–ª–æ–µ":
            next_block = "block3b"
        elif rb == "—Å–µ–º–µ–π–Ω–æ–µ":
            next_block = "block3c"
        else:
            next_block = "block3d"
        from router import route_message
        # –í —Ç–µ—Å—Ç–∞—Ö —Ñ–µ–π–∫–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä –Ω–µ –º–µ–Ω—è–µ—Ç stage ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º —Å–∞–º–∏
        state.update_state(user_id, {"stage": next_block})
        return route_message(message_text, user_id, force_stage=next_block)

    # –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    classification_prompt = render_prompt(CLASSIF_PROMPT_PATH, message_text=message_text)
    try:
        resp = ask_openai(classification_prompt)
        show_type = (resp or "").strip().lower()
    except Exception as e:
        logger.info(f"[error] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏: {e}")
        show_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ü–ï–†–ï–î –ø—Ä–æ–≤–µ—Ä–∫–æ–π allowed
    for junk in (".", "!", "?", ":", ";", "‚Äî", "‚Äì"):
        show_type = show_type.replace(junk, "")
    show_type = show_type.strip()

    allowed = {"–¥–µ—Ç—Å–∫–æ–µ", "—Å–µ–º–µ–π–Ω–æ–µ", "–≤–∑—Ä–æ—Å–ª–æ–µ", "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}
    if not show_type or show_type not in allowed:
        logger.info(f"[warn] ‚ö†Ô∏è –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏: {show_type!r}, fallback ‚Üí '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'")
        show_type = "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    logger.info(f"[debug] üß† –æ–ø—Ä–µ–¥–µ–ª—ë–Ω —Ç–∏–ø —à–æ—É: {show_type}")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    if show_type == "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ":
        # –≤—Å–µ–≥–¥–∞ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –≤ state —Ç–µ–∫—É—â–∏–π show_type
        state.update_state(user_id, {
            "show_type": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "last_sender": "user",
            "last_message_ts": time.time()
        })
        count = st.get("uninformative_replies", 0) + 1

        if count > 2:
            state.update_state(user_id, {
                "handover_reason": "classification_failed_x3",
                "scenario_stage_at_handover": "block2"
            })
            from router import route_message
            return route_message("", user_id, force_stage="block5")

        clarification_prompt = global_prompt + "\n\n" + stage_prompt + "\n\n" + \
            "–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –≤–∞–º–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –±—ã–ª–æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ. " \
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏–∏ –ø–æ–¥—Ä–æ–±–Ω–µ–µ: —á–µ–π –ø—Ä–∞–∑–¥–Ω–∏–∫, —Å–∫–æ–ª—å–∫–æ –≥–æ—Å—Ç–µ–π, –≤–∑—Ä–æ—Å–ª—ã–µ –∏–ª–∏ –¥–µ—Ç–∏?"

        try:
            clarification_reply = ask_openai(clarification_prompt)
        except Exception as e:
            logger.info(f"[error] ‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏ 2: {e}")
            clarification_reply = ""
        if clarification_reply:
            send_reply_func(clarification_reply)

        state.update_state(user_id, {
            "show_type": "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ",
            "uninformative_replies": count,
            "last_sender": "bot",
            "last_message_ts": time.time()
        })

        plan(user_id,
             "blocks.block_02:send_first_reminder_if_silent",
             DELAY_TO_BLOCK_2_1_HOURS * 3600)
        return

    # –í—Å—ë –æ–∫ ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω—É–∂–Ω—ã–π –±–ª–æ–∫ (–ø–∏—à–µ–º —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ update_state)
    ts = time.time()
    state.update_state(user_id, {
        "show_type": show_type,
        "uninformative_replies": 0,
        "last_sender": "user",
        "last_message_ts": ts
    })

    if show_type == "–¥–µ—Ç—Å–∫–æ–µ":
        next_block = "block3a"
    elif show_type == "–≤–∑—Ä–æ—Å–ª–æ–µ":
        next_block = "block3b"
    elif show_type == "—Å–µ–º–µ–π–Ω–æ–µ":
        next_block = "block3c"
    elif show_type == "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ":
        next_block = "block3d"
    else:
        logger.info(f"[warn] ‚ùó–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø —à–æ—É: {show_type}, fallback ‚Üí block5")
        next_block = "block5"  # fallback –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π

    from router import route_message
    return route_message(message_text, user_id, force_stage=next_block)


def send_first_reminder_if_silent(user_id, send_reply_func):
    state = _state()
    st = state.get_state(user_id)
    if not st or st.get("stage") != "block2":
        return  # –ö–ª–∏–µ–Ω—Ç —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª –∏–ª–∏ —Å–º–µ–Ω–∏–ª—Å—è –±–ª–æ–∫ ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if st.get("last_sender") == "user":
        return
    # –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å: –µ—Å–ª–∏ —É–∂–µ —Å—Ç–∞–≤–∏–ª–∏ R1 ‚Äî –≤—ã—Ö–æ–¥–∏–º
    if st.get("r1_scheduled_b2"):
        return

    global_prompt = load_prompt(GLOBAL_PROMPT_PATH)
    reminder_prompt = load_prompt(REMINDER_PROMPT_PATH)
    full_prompt = global_prompt + "\n\n" + reminder_prompt

    reply = ask_openai(full_prompt)
    send_reply_func(reply)

    state.update_state(user_id, {"stage": "block2", "last_message_ts": time.time()})

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç–∞–π–º–µ—Ä–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 12 —á–∞—Å–æ–≤ (–≤ –±–ª–æ–∫ 2.2)
    plan(user_id, "blocks.block_02:send_second_reminder_if_silent", DELAY_TO_BLOCK_2_2_HOURS * 3600)
    state.update_state(user_id, {"r1_scheduled_b2": True})
    

def send_second_reminder_if_silent(user_id, send_reply_func):
    state = _state()
    st = state.get_state(user_id)
    if not st or st.get("stage") != "block2":
        return  # –ö–ª–∏–µ–Ω—Ç —É–∂–µ –æ—Ç–≤–µ—Ç–∏–ª ‚Äî –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    if st.get("last_sender") == "user":
        return
    if st.get("r2_scheduled_b2"):
        return

    global_prompt = load_prompt(GLOBAL_PROMPT_PATH)
    reminder_prompt = load_prompt(REMINDER_2_PROMPT_PATH)
    full_prompt = global_prompt + "\n\n" + reminder_prompt

    reply = ask_openai(full_prompt)
    send_reply_func(reply)

    state.update_state(user_id, {"stage": "block2", "last_message_ts": time.time()})
    plan(user_id, "blocks.block_02:finalize_if_still_silent", FINAL_TIMEOUT_HOURS * 3600)
    state.update_state(user_id, {"r2_scheduled_b2": True})

# –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–∞–π–º–µ—Ä ‚Äî –µ—Å–ª–∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –æ—Ç–≤–µ—Ç–∏—Ç –µ—â—ë 4 —á–∞—Å–∞, —É—Ö–æ–¥–∏–º –≤ block5
def finalize_if_still_silent(user_id, send_reply_func):
    state = _state()
    st2 = state.get_state(user_id)
    if not st2 or st2.get("stage") != "block2":
        return  # –û—Ç–≤–µ—Ç–∏–ª ‚Äî –≤—Å—ë –æ–∫
    # –∏–¥–µ–º–ø–æ—Ç–µ–Ω—Ç–Ω–æ—Å—Ç—å —Ñ–∏–Ω–∞–ª–∞
    if st2.get("fin_scheduled_b2_done"):
        return
    state.update_state(user_id, {
        "handover_reason": "no_response_after_2_2",
        "scenario_stage_at_handover": "block2",
        "fin_scheduled_b2_done": True    })
    from router import route_message
    route_message("", user_id, force_stage="block5")
