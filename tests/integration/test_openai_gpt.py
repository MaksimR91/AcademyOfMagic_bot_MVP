# tests/integration/test_openai_gpt.py
import os
import time
import pytest
from dataclasses import dataclass
from typing import List, Tuple, Any
from pathlib import Path

"""
–¢—Ä–µ–±—É–µ—Ç—Å—è ENV:
  OPENAI_API_KEY          ‚Äî –∫–ª—é—á
  OPENAI_MODEL_CLASSIFY   ‚Äî (–æ–ø—Ü.) –º–æ–¥–µ–ª—å –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4o-mini
  OPENAI_MODEL_TEXT       ‚Äî (–æ–ø—Ü.) –º–æ–¥–µ–ª—å –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é gpt-4o-mini

–ó–∞–ø—É—Å–∫:
  pytest -q tests/integration/test_openai_gpt.py -s
"""

try:
    from openai import OpenAI  # runtime –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ
except Exception:  # pragma: no cover
    OpenAI = None  # noqa: N816  (–æ—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –Ω–∏–∂–µ)


REQUIRED = ("OPENAI_API_KEY",)
MODEL_CLASSIFY = os.getenv("OPENAI_MODEL_CLASSIFY", "gpt-4o-mini")
MODEL_TEXT     = os.getenv("OPENAI_MODEL_TEXT", "gpt-4o-mini")
REQUEST_TIMEOUT = float(os.getenv("OPENAI_TIMEOUT", "20"))
MAX_DATASET = int(os.getenv("OPENAI_TEST_LIMIT", "9999"))  # –º–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å, –Ω–∞–ø—Ä. 12 –≤ CI
EXPECTED_LABELS = {"–¥–µ—Ç—Å–∫–æ–µ", "–≤–∑—Ä–æ—Å–ª–æ–µ", "—Å–µ–º–µ–π–Ω–æ–µ", "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"}

# –ø—É—Ç–∏ –∫ –ø—Ä–æ–º–ø—Ç–∞–º
GLOBAL_PROMPT_PATH = Path("prompts/global_prompt.txt")
CLASSIF_PROMPT_PATH = Path("prompts/block02_classification_prompt.txt")
BLOCK4_PROMPT_PATH  = Path("prompts/block04_prompt.txt")
AVAIL_PROMPT_PATH   = Path("prompts/block03_availability_prompt.txt")



def _require_env():
    if not os.getenv("OPENAI_API_KEY"):
        pytest.skip("Missing OPENAI_API_KEY; skipping OpenAI live tests")


def _client() -> Any:
    # –í–µ—à–∞–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π —Ç–∞–π–º–∞—É—Ç –Ω–∞ –≤—Å–µ –∑–∞–ø—Ä–æ—Å—ã –∫–ª–∏–µ–Ω—Ç–∞
    return OpenAI(api_key=os.getenv("OPENAI_API_KEY"), timeout=REQUEST_TIMEOUT)



def classify_show(client: Any, text: str) -> str:
    """–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –ø–æ —Ä–µ–∞–ª—å–Ω—ã–º –ø—Ä–æ–º–ø—Ç–∞–º: global + block02_classification_prompt.txt"""
    assert GLOBAL_PROMPT_PATH.exists(), "–ù–µ—Ç prompts/global_prompt.txt"
    assert CLASSIF_PROMPT_PATH.exists(), "–ù–µ—Ç prompts/block02_classification_prompt.txt"
    sys_prompt = GLOBAL_PROMPT_PATH.read_text(encoding="utf-8")
    # –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä {message_text} –≤ —à–∞–±–ª–æ–Ω–µ
    user_msg = CLASSIF_PROMPT_PATH.read_text(encoding="utf-8").format(message_text=text)
    rsp = client.chat.completions.create(
        model=MODEL_CLASSIFY,
        temperature=0,
        messages=[
            {"role": "system", "content": sys_prompt},
            {"role": "user", "content": user_msg},
        ],
        timeout=REQUEST_TIMEOUT,
        max_tokens=8,
    )
    label = rsp.choices[0].message.content or ""
    label = label.strip().lower()
    # –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Ö–≤–æ—Å—Ç–æ–≤/—Å–∏–Ω–æ–Ω–∏–º–æ–≤
    label = label.replace("–≤–∞—Ä–∏–∞–Ω—Ç:", "").replace(".", "").strip()
    syn = {
        "–¥–µ—Ç—Å–∫–∞—è": "–¥–µ—Ç—Å–∫–æ–µ",
        "–≤–∑—Ä–æ—Å–ª–∞—è": "–≤–∑—Ä–æ—Å–ª–æ–µ",
        "—Å–µ–º–µ–π–Ω–∞—è": "—Å–µ–º–µ–π–Ω–æ–µ",
        "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è": "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ",
        "–Ω–µ–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–µ": "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ",
    }
    label = syn.get(label, label)
    return label


def gen_materials_text(client: Any, show_type: str) -> str:
    """–ö–æ—Ä–æ—Ç–∫–∏–π —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ö–ü+–≤–∏–¥–µ–æ –ø–æ —Ä–µ–∞–ª—å–Ω–æ–º—É –ø—Ä–æ–º–ø—Ç—É block04_prompt.txt."""
    assert GLOBAL_PROMPT_PATH.exists(), "–ù–µ—Ç prompts/global_prompt.txt"
    assert BLOCK4_PROMPT_PATH.exists(), "–ù–µ—Ç prompts/block04_prompt.txt"
    sys_prompt = GLOBAL_PROMPT_PATH.read_text(encoding="utf-8")
    # –¥–æ–ø—É—Å–∫–∞–µ–º {show_type} –≤ stage-–ø—Ä–æ–º–ø—Ç–µ
    base = BLOCK4_PROMPT_PATH.read_text(encoding="utf-8")
    try:
        user_msg = base.format(show_type=show_type)
    except Exception:
        user_msg = base
    # –∂—ë—Å—Ç–∫–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –¥–ª–∏–Ω—ã –≤ —Å–∞–º–æ–º –ø—Ä–æ–º–ø—Ç–µ
    user_msg += "\n\n–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ: —Å–¥–µ–ª–∞–π –∫—Ä–∞—Ç–∫–∏–π —Å–æ–ø—Ä–æ–≤–æ–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç 2‚Äì4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π –∏ –ø–æ–¥–ø–∏—Å–µ–π, –±–µ–∑ —Å—Å—ã–ª–æ–∫ –∏ —ç–º–æ–¥–∑–∏, –º–∞–∫—Å–∏–º—É–º 350 —Å–∏–º–≤–æ–ª–æ–≤."
    rsp = client.chat.completions.create(
        model=MODEL_TEXT,
        temperature=0.2,
        messages=[
            {"role": "system", "content": sys_prompt},
            {"role": "user", "content": user_msg},
        ],
        timeout=REQUEST_TIMEOUT,
        max_tokens=300,
     )
    txt = (rsp.choices[0].message.content or "").strip()
    # —Ñ–∏–Ω–∞–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä–æ–ª—ë—Ç–∞ –ø–æ –¥–ª–∏–Ω–µ
    return txt[:400]


@dataclass
class Case:
    text: str
    expected: str  # –æ–¥–∏–Ω –∏–∑ EXPECTED_LABELS


def _dataset() -> List[Case]:
    """
    ‚â•20 —Ñ—Ä–∞–∑, –ø–æ–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ –∫–ª–∞—Å—Å—ã.
    """
    ds: List[Case] = [
        # –¥–µ—Ç—Å–∫–æ–µ
        Case("–î–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è —Å—ã–Ω–∞, 7 –ª–µ—Ç, –¥–æ–º–∞, –±—É–¥–µ—Ç –º–Ω–æ–≥–æ –¥–µ—Ç–µ–π", "–¥–µ—Ç—Å–∫–æ–µ"),
        Case("–ü—Ä–∞–∑–¥–Ω–∏–∫ –≤ –¥–µ—Ç—Å–∞–¥—É —É –¥–æ—á–∫–∏, 5 –ª–µ—Ç, —É—Ç—Ä–µ–Ω–Ω–∏–∫", "–¥–µ—Ç—Å–∫–æ–µ"),
        Case("–®–æ—É –¥–ª—è —à–∫–æ–ª—å–Ω–∏–∫–æ–≤, –∫–ª–∞—Å—Å 2-–ë, –ø–æ—Å–ª–µ –æ–±–µ–¥–∞", "–¥–µ—Ç—Å–∫–æ–µ"),
        Case("–ú–∞–ª—å—á–∏–∫—É 10 –ª–µ—Ç, –∫–∞—Ñ–µ, 15 –¥—Ä—É–∑–µ–π", "–¥–µ—Ç—Å–∫–æ–µ"),
        Case("–Å–ª–∫–∞ –≤–æ –¥–≤–æ—Ä–µ –¥–ª—è –º–∞–ª—ã—à–µ–π, –Ω—É–∂–µ–Ω —Ñ–æ–∫—É—Å–Ω–∏–∫", "–¥–µ—Ç—Å–∫–æ–µ"),
        # –≤–∑—Ä–æ—Å–ª–æ–µ
        Case("–°–≤–∞–¥—å–±–∞ –≤ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–µ, 50 –≥–æ—Å—Ç–µ–π, —Å—Ü–µ–Ω–∞ –µ—Å—Ç—å", "–≤–∑—Ä–æ—Å–ª–æ–µ"),
        Case("–Æ–±–∏–ª–µ–π —É –ø–∞–ø—ã, 60 –ª–µ—Ç, –∑–∞–ª –Ω–µ–±–æ–ª—å—à–æ–π", "–≤–∑—Ä–æ—Å–ª–æ–µ"),
        Case("–Æ–±–∏–ª–µ–π –¥–µ–¥—É—à–∫–∏ 70 –ª–µ—Ç, –¥–æ–º–∞", "–≤–∑—Ä–æ—Å–ª–æ–µ"),
        Case("–°–≤–∞–¥—å–±–∞ –Ω–∞ –ø—Ä–∏—Ä–æ–¥–µ, 100 –≥–æ—Å—Ç–µ–π", "–≤–∑—Ä–æ—Å–ª–æ–µ"),
        Case("–ì–æ–¥–æ–≤—â–∏–Ω–∞ —Å–≤–∞–¥—å–±—ã, —Å–µ–º—å—è –∏ –¥—Ä—É–∑—å—è", "–≤–∑—Ä–æ—Å–ª–æ–µ"),
        # —Å–µ–º–µ–π–Ω–æ–µ
        Case("–°–µ–º–µ–π–Ω—ã–π –ø—Ä–∞–∑–¥–Ω–∏–∫, –±—É–¥—É—Ç –∏ –¥–µ—Ç–∏, –∏ –≤–∑—Ä–æ—Å–ª—ã–µ", "—Å–µ–º–µ–π–Ω–æ–µ"),
        Case("–ü–æ—Ö–æ–¥ –≤—Å–µ–π —Å–µ–º—å–∏ –≤ –∫–∞—Ñ–µ, 20 —á–µ–ª–æ–≤–µ–∫, –ø–æ—Ä–æ–≤–Ω—É –¥–µ—Ç–µ–π –∏ –≤–∑—Ä–æ—Å–ª—ã—Ö", "—Å–µ–º–µ–π–Ω–æ–µ"),
        Case("–ö—Ä–µ—â–µ–Ω–∏–µ –ø–ª–µ–º—è–Ω–Ω–∏–∫–∞, —Å–µ–º–µ–π–Ω—ã–π —É–∂–∏–Ω", "—Å–µ–º–µ–π–Ω–æ–µ"),
        Case("–ü—Ä–∞–∑–¥–Ω–∏–∫ –≤–æ –¥–≤–æ—Ä–µ, —Å–µ–º—å–∏ —Å –¥–µ—Ç—å–º–∏", "—Å–µ–º–µ–π–Ω–æ–µ"),
        Case("–î–æ–º–∞—à–Ω–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫: –ø–æ–ª–æ–≤–∏–Ω–∞ –¥–µ—Ç–∏, –ø–æ–ª–æ–≤–∏–Ω–∞ –≤–∑—Ä–æ—Å–ª—ã–µ", "—Å–µ–º–µ–π–Ω–æ–µ"),
        # –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ
        Case("–°—ä—ë–º–∫–∞ –∫–ª–∏–ø–∞, —Ö–æ—Ç–∏–º –Ω–µ–æ–±—ã—á–Ω—ã–µ —Ç—Ä—é–∫–∏ –Ω–∞ –∫–∞–º–µ—Ä—É", "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"),
        Case("–ö–≤–µ—Å—Ç –≤ —Ç–æ—Ä–≥–æ–≤–æ–º —Ü–µ–Ω—Ç—Ä–µ, –Ω—É–∂–Ω–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤ —Å —Ñ–æ–∫—É—Å–∞–º–∏", "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"),
        Case("–£–ª–∏—á–Ω—ã–π –ø–µ—Ä—Ñ–æ—Ä–º–∞–Ω—Å –Ω–∞ —Ñ–µ—Å—Ç–∏–≤–∞–ª–µ, –æ—Ç–∫—Ä—ã—Ç–∞—è –ø–ª–æ—â–∞–¥–∫–∞", "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"),
        Case("–†–µ–∫–ª–∞–º–Ω–∞—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø—Ä–æ–¥—É–∫—Ç–æ–º, –Ω—É–∂–µ–Ω —Å–ø–µ—Ü-—Ç—Ä—é–∫", "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"),
        Case("–°—é—Ä–ø—Ä–∏–∑-–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É–∫–∏ –∏ —Å–µ—Ä–¥—Ü–∞ —Å –∏–ª–ª—é–∑–∏–µ–π", "–Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ"),
    ]
    return ds


def test_openai_classification_accuracy_live():
    _require_env()
    assert OpenAI is not None, "openai SDK not installed"
    client = _client()

    ds = _dataset()
    if len(ds) > MAX_DATASET:
        ds = ds[:MAX_DATASET]
    ok = 0
    results: List[Tuple[str, str, str]] = []  # (text, expected, got)
    for case in ds:
        got = classify_show(client, case.text)
        results.append((case.text, case.expected, got))
        if got not in EXPECTED_LABELS:
            pytest.fail(f"–ú–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–ª–∞—Å—Å: {got!r} for text={case.text!r}")
        if got == case.expected:
            ok += 1
        time.sleep(0.15)  # —â–∞–¥–∏–º rate limit

    acc = ok / len(ds)
    # –õ–æ–≥ –≤ —Å–ª—É—á–∞–µ –ø—Ä–æ–≤–∞–ª–∞
    if acc < 0.9:
        pretty = "\n".join([f"- {t} ‚Üí –æ–∂–∏–¥–∞–ª–æ—Å—å {e}, –ø–æ–ª—É—á–µ–Ω–æ {g}" for t, e, g in results if e != g])
        pytest.fail(f"–¢–æ—á–Ω–æ—Å—Ç—å –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ {acc:.2%} < 90%.\n–û—à–∏–±–∫–∏:\n{pretty}")

    assert acc >= 0.90


@pytest.mark.parametrize("show_type", ["–¥–µ—Ç—Å–∫–æ–µ", "–≤–∑—Ä–æ—Å–ª–æ–µ", "—Å–µ–º–µ–π–Ω–æ–µ"])
def test_openai_materials_text_live(show_type):
    _require_env()
    client = _client()
    txt = gen_materials_text(client, show_type)
    # –ü—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ –¢–ó
    assert isinstance(txt, str) and len(txt) > 0
    assert len(txt) <= 400
    # –±–µ–∑ —Å—Å—ã–ª–æ–∫/—ç–º–æ–¥–∑–∏ ‚Äî –≥—Ä—É–±–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
    assert "http" not in txt.lower()
    forbidden = {"üéâ", "‚ú®", "üòä", "üëç", "üòâ", "üî•"}
    assert not any(ch in txt for ch in forbidden), f"–≠–º–æ–¥–∑–∏ –Ω–µ –¥–æ–ø—É—Å–∫–∞—é—Ç—Å—è: {txt}"


def _call_availability_prompt(client: Any, *, message_text: str, date_iso: str, time_24: str, availability: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏: global + block03a_availability_prompt.txt."""
    assert GLOBAL_PROMPT_PATH.exists(), "–ù–µ—Ç prompts/global_prompt.txt"
    assert AVAIL_PROMPT_PATH.exists(),  "–ù–µ—Ç prompts/block03_availability_prompt.txt"
    from datetime import datetime
    sys_prompt = GLOBAL_PROMPT_PATH.read_text(encoding="utf-8")
    client_request_date = datetime.now().strftime("%d %B %Y")
    user_msg = AVAIL_PROMPT_PATH.read_text(encoding="utf-8").format(
        message_text=message_text,
        date_iso=date_iso,
        time_24=time_24,
        client_request_date=client_request_date,
        availability=availability,
    )
    rsp = client.chat.completions.create(
        model=MODEL_TEXT,
        temperature=0.0,
        messages=[
            {"role": "system", "content": sys_prompt},
            {"role": "user", "content": user_msg},
        ],
        timeout=REQUEST_TIMEOUT,
        max_tokens=250,
    )
    return (rsp.choices[0].message.content or "").strip()


@pytest.mark.parametrize("availability,expect_free", [
    ("available", True),
    ("occupied", False),
    ("need_handover", False),
])
def test_openai_availability_text_live(availability, expect_free):
    _require_env()
    client = _client()
    txt = _call_availability_prompt(
        client,
        message_text="–•–æ—Ç–∏–º 3 —Å–µ–Ω—Ç—è–±—Ä—è –≤ 15:00. –Æ–±–∏–ª–µ–π —Å—ã–Ω–∞.",
        date_iso="2025-09-03",
        time_24="15:00",
        availability=availability,
    )
    assert txt, "–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –¥–ª—è availability"
    # –≥—Ä—É–±—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∏–ª—è
    assert "http" not in txt.lower()
    for ch in ("üéâ","‚ú®","üòä","üëç","üòâ","üî•"):
        assert ch not in txt
    # —Å–º—ã—Å–ª: –ø—Ä–∏ available ‚Äî –æ–±–µ—â–∞–Ω–∏–µ –≤—ã—Å—Ç—É–ø–∏—Ç—å, –∏–Ω–∞—á–µ ‚Äî ¬´—Å–≤—è–∂–µ—Ç—Å—è –ø–æ–∑–∂–µ¬ª
    low = txt.lower()
    if expect_free:
        assert ("—Å–º–æ–∂–µ—Ç" in low or "—Å–≤–æ–±–æ–¥–Ω" in low or "–ø–æ–¥—Ç–≤–µ—Ä–∂" in low), f"–ù–µ—Ç —è–≤–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {txt}"
    else:
        assert ("—Å–≤—è–∂" in low or "–ø–æ–∑–∂–µ" in low or "—É—Ç–æ—á–Ω" in low), f"–ù–µ—Ç —è–≤–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ –¥–∞–ª—å–Ω–µ–π—à—É—é —Å–≤—è–∑—å: {txt}"
    time.sleep(0.2)
